
HID_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003798  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038cc  080038cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038cc  080038cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038d4  080038d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  080038e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00003804  200001fc  080038e8  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ead1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002251  00000000  00000000  0002eb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00030d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00031b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015889  00000000  00000000  000327c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ec4  00000000  00000000  00048049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e1a  00000000  00000000  00058f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ddd27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  000ddd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003840 	.word	0x08003840

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003840 	.word	0x08003840

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <ALL_Init>:
static void MX_RTC_Init(void);
static void MX_USART5_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void ALL_Init() {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 80004ac:	f000 fa5e 	bl	800096c <MX_GPIO_Init>
	  MX_DMA_Init();
 80004b0:	f000 fa3e 	bl	8000930 <MX_DMA_Init>
	  MX_RTC_Init();
 80004b4:	f000 f9a6 	bl	8000804 <MX_RTC_Init>
	  MX_USART5_UART_Init();
 80004b8:	f000 fa0a 	bl	80008d0 <MX_USART5_UART_Init>
	  MX_USART2_UART_Init();
 80004bc:	f000 f9d8 	bl	8000870 <MX_USART2_UART_Init>
	  MX_I2C1_Init();
 80004c0:	f000 f962 	bl	8000788 <MX_I2C1_Init>
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <fputcc>:

int fputcc(uint8_t ch) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart5, (uint8_t*)&ch, 1, 0xffff);
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <fputcc+0x24>)
 80004da:	1df9      	adds	r1, r7, #7
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <fputcc+0x28>)
 80004de:	2201      	movs	r2, #1
 80004e0:	f002 fc7a 	bl	8002dd8 <HAL_UART_Transmit>
	return ch;
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781b      	ldrb	r3, [r3, #0]
}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	0000ffff 	.word	0x0000ffff
 80004f4:	2000011c 	.word	0x2000011c

080004f8 <lowPowerMode>:
	else {
		return 0;
	}
}

void lowPowerMode() {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

//	IKS01A3_MOTION_SENSOR_DRDY_Set_Mode(0, 1);
//	IKS01A3_MOTION_SENSOR_DRDY_Enable_Interrupt(0, (MOTION_ACCELERO | MOTION_GYRO), 0);
	// Sleep about 4 secs
//	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2616, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004fc:	23a0      	movs	r3, #160	; 0xa0
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	2120      	movs	r1, #32
 8000502:	0018      	movs	r0, r3
 8000504:	f001 f904 	bl	8001710 <HAL_GPIO_TogglePin>

	// Enter Stop mode
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000508:	2101      	movs	r1, #1
 800050a:	2001      	movs	r0, #1
 800050c:	f001 fa66 	bl	80019dc <HAL_PWR_EnterSTOPMode>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000510:	23a0      	movs	r3, #160	; 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2120      	movs	r1, #32
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f8fa 	bl	8001710 <HAL_GPIO_TogglePin>
//	IKS01A3_MOTION_SENSOR_DRDY_Disable_Interrupt(0, (MOTION_ACCELERO | MOTION_GYRO), 0);
	SystemClock_Config();
 800051c:	f000 f8be 	bl	800069c <SystemClock_Config>
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <lowResourceMode>:

void lowResourceMode() {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800052c:	23a0      	movs	r3, #160	; 0xa0
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2120      	movs	r1, #32
 8000532:	0018      	movs	r0, r3
 8000534:	f001 f8ec 	bl	8001710 <HAL_GPIO_TogglePin>
	HAL_PWREx_EnableLowPowerRunMode();
 8000538:	f001 faac 	bl	8001a94 <HAL_PWREx_EnableLowPowerRunMode>
	while(__HAL_PWR_GET_FLAG(PWR_FLAG_REGLP) == RESET){}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <lowResourceMode+0x2c>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	2220      	movs	r2, #32
 8000544:	4013      	ands	r3, r2
 8000546:	2b20      	cmp	r3, #32
 8000548:	d1f9      	bne.n	800053e <lowResourceMode+0x16>
	ALL_Init();
 800054a:	f7ff ffad 	bl	80004a8 <ALL_Init>
}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40007000 	.word	0x40007000

08000558 <init_Keyboard>:
	GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3
};

uint8_t KeyStatus[2];

void init_Keyboard() {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
	// scan for initial condition
	for(int i = 0; i < KeyCount; i++) {
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	e012      	b.n	800058a <init_Keyboard+0x32>
		KeyStatus[i] = HAL_GPIO_ReadPin(GPIOx_keyboard, KeyGPIO[i]);
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <init_Keyboard+0x48>)
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	0052      	lsls	r2, r2, #1
 800056a:	5ad3      	ldrh	r3, [r2, r3]
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <init_Keyboard+0x4c>)
 800056e:	0019      	movs	r1, r3
 8000570:	0010      	movs	r0, r2
 8000572:	f001 f893 	bl	800169c <HAL_GPIO_ReadPin>
 8000576:	0003      	movs	r3, r0
 8000578:	0019      	movs	r1, r3
 800057a:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <init_Keyboard+0x50>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	18d3      	adds	r3, r2, r3
 8000580:	1c0a      	adds	r2, r1, #0
 8000582:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < KeyCount; i++) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3301      	adds	r3, #1
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	2302      	movs	r3, #2
 800058c:	001a      	movs	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4293      	cmp	r3, r2
 8000592:	dbe7      	blt.n	8000564 <init_Keyboard+0xc>
	}
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	08003858 	.word	0x08003858
 80005a4:	50000800 	.word	0x50000800
 80005a8:	200001f4 	.word	0x200001f4

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fc81 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f871 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SystemPower_Config();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f9d7 	bl	800096c <MX_GPIO_Init>
  MX_DMA_Init();
 80005be:	f000 f9b7 	bl	8000930 <MX_DMA_Init>
  MX_RTC_Init();
 80005c2:	f000 f91f 	bl	8000804 <MX_RTC_Init>
  MX_USART5_UART_Init();
 80005c6:	f000 f983 	bl	80008d0 <MX_USART5_UART_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f951 	bl	8000870 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ce:	f000 f8db 	bl	8000788 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  BSP_I2C1_Init();
//  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, (MOTION_GYRO | MOTION_ACCELERO));
//  IKS01A3_MOTION_SENSOR_Enable_
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d2:	23a0      	movs	r3, #160	; 0xa0
 80005d4:	05db      	lsls	r3, r3, #23
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 f87b 	bl	80016d6 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  init_Keyboard();
 80005e0:	f7ff ffba 	bl	8000558 <init_Keyboard>
  last_pin = -1;
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <main+0xd8>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	601a      	str	r2, [r3, #0]
  last_triggered = HAL_GetTick();
 80005ec:	f000 fcca 	bl	8000f84 <HAL_GetTick>
 80005f0:	0003      	movs	r3, r0
 80005f2:	001a      	movs	r2, r3
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <main+0xdc>)
 80005f6:	601a      	str	r2, [r3, #0]
  const int sleep_threshold = 30000;
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <main+0xe0>)
 80005fa:	607b      	str	r3, [r7, #4]
  const int low_threshold = 6000;
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <main+0xe4>)
 80005fe:	603b      	str	r3, [r7, #0]
  counter = 0;
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <main+0xe8>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
//			  HAL_PWREx_DisableLowPowerRunMode();
//			  while(__HAL_PWR_GET_FLAG(PWR_FLAG_REGLP) == SET){}
//			  ALL_Init();
//		  }
//	  }
	  if(__HAL_PWR_GET_FLAG(PWR_FLAG_REGLP) == SET && HAL_GetTick() - last_triggered < low_threshold) {
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <main+0xec>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	2220      	movs	r2, #32
 800060c:	4013      	ands	r3, r2
 800060e:	2b20      	cmp	r3, #32
 8000610:	d113      	bne.n	800063a <main+0x8e>
 8000612:	f000 fcb7 	bl	8000f84 <HAL_GetTick>
 8000616:	0002      	movs	r2, r0
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <main+0xdc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1ad2      	subs	r2, r2, r3
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d20a      	bcs.n	800063a <main+0x8e>
		  HAL_PWREx_DisableLowPowerRunMode();
 8000624:	f001 fa4a 	bl	8001abc <HAL_PWREx_DisableLowPowerRunMode>
	  	  while(__HAL_PWR_GET_FLAG(PWR_FLAG_REGLP) == SET){}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <main+0xec>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	2220      	movs	r2, #32
 8000630:	4013      	ands	r3, r2
 8000632:	2b20      	cmp	r3, #32
 8000634:	d0f9      	beq.n	800062a <main+0x7e>
		  ALL_Init();
 8000636:	f7ff ff37 	bl	80004a8 <ALL_Init>
	  }
	  if(HAL_GetTick() - last_triggered > sleep_threshold) {
 800063a:	f000 fca3 	bl	8000f84 <HAL_GetTick>
 800063e:	0002      	movs	r2, r0
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <main+0xdc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	1ad2      	subs	r2, r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	d908      	bls.n	800065e <main+0xb2>
		  lowPowerMode();
 800064c:	f7ff ff54 	bl	80004f8 <lowPowerMode>
		  last_triggered = HAL_GetTick();
 8000650:	f000 fc98 	bl	8000f84 <HAL_GetTick>
 8000654:	0003      	movs	r3, r0
 8000656:	001a      	movs	r2, r3
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <main+0xdc>)
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	e7d3      	b.n	8000606 <main+0x5a>
	  }
	  else if(__HAL_PWR_GET_FLAG(PWR_FLAG_REGLP) == RESET && HAL_GetTick() - last_triggered > low_threshold) {
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <main+0xec>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	2220      	movs	r2, #32
 8000664:	4013      	ands	r3, r2
 8000666:	2b20      	cmp	r3, #32
 8000668:	d0cd      	beq.n	8000606 <main+0x5a>
 800066a:	f000 fc8b 	bl	8000f84 <HAL_GetTick>
 800066e:	0002      	movs	r2, r0
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <main+0xdc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	1ad2      	subs	r2, r2, r3
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	429a      	cmp	r2, r3
 800067a:	d9c4      	bls.n	8000606 <main+0x5a>
		  lowResourceMode();
 800067c:	f7ff ff54 	bl	8000528 <lowResourceMode>
	  if(__HAL_PWR_GET_FLAG(PWR_FLAG_REGLP) == SET && HAL_GetTick() - last_triggered < low_threshold) {
 8000680:	e7c1      	b.n	8000606 <main+0x5a>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	200001ec 	.word	0x200001ec
 8000688:	200001e8 	.word	0x200001e8
 800068c:	00007530 	.word	0x00007530
 8000690:	00001770 	.word	0x00001770
 8000694:	200001f0 	.word	0x200001f0
 8000698:	40007000 	.word	0x40007000

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b09f      	sub	sp, #124	; 0x7c
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	2440      	movs	r4, #64	; 0x40
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0018      	movs	r0, r3
 80006a8:	2338      	movs	r3, #56	; 0x38
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f003 f8bf 	bl	8003830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b2:	232c      	movs	r3, #44	; 0x2c
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	0018      	movs	r0, r3
 80006b8:	2314      	movs	r3, #20
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f003 f8b7 	bl	8003830 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	2328      	movs	r3, #40	; 0x28
 80006c8:	001a      	movs	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f003 f8b0 	bl	8003830 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemClock_Config+0xe4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a2b      	ldr	r2, [pc, #172]	; (8000784 <SystemClock_Config+0xe8>)
 80006d6:	401a      	ands	r2, r3
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <SystemClock_Config+0xe4>)
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	0109      	lsls	r1, r1, #4
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80006e2:	0021      	movs	r1, r4
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2218      	movs	r2, #24
 80006e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2201      	movs	r2, #1
 80006ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	0192      	lsls	r2, r2, #6
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	187b      	adds	r3, r7, r1
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fa13 	bl	8001b38 <HAL_RCC_OscConfig>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000716:	f000 fa13 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	212c      	movs	r1, #44	; 0x2c
 800071c:	187b      	adds	r3, r7, r1
 800071e:	220f      	movs	r2, #15
 8000720:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2100      	movs	r1, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f001 fdce 	bl	80022e0 <HAL_RCC_ClockConfig>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000748:	f000 f9fa 	bl	8000b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	222a      	movs	r2, #42	; 0x2a
 8000750:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	0292      	lsls	r2, r2, #10
 8000764:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	0018      	movs	r0, r3
 800076a:	f001 ffdd 	bl	8002728 <HAL_RCCEx_PeriphCLKConfig>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000772:	f000 f9e5 	bl	8000b40 <Error_Handler>
  }
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b01f      	add	sp, #124	; 0x7c
 800077c:	bd90      	pop	{r4, r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40007000 	.word	0x40007000
 8000784:	ffffe7ff 	.word	0xffffe7ff

08000788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_I2C1_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_I2C1_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_I2C1_Init+0x74>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 ffdb 	bl	8001780 <HAL_I2C_Init>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ce:	f000 f9b7 	bl	8000b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_I2C1_Init+0x74>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 f868 	bl	80018ac <HAL_I2CEx_ConfigAnalogFilter>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e0:	f000 f9ae 	bl	8000b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_I2C1_Init+0x74>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 f8ab 	bl	8001944 <HAL_I2CEx_ConfigDigitalFilter>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 f9a5 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000028 	.word	0x20000028
 8000800:	40005400 	.word	0x40005400

08000804 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_RTC_Init+0x60>)
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_RTC_Init+0x64>)
 800080c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_RTC_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_RTC_Init+0x60>)
 8000816:	227f      	movs	r2, #127	; 0x7f
 8000818:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_RTC_Init+0x60>)
 800081c:	22ff      	movs	r2, #255	; 0xff
 800081e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_RTC_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_RTC_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_RTC_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_RTC_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_RTC_Init+0x60>)
 800083a:	0018      	movs	r0, r3
 800083c:	f002 f8e8 	bl	8002a10 <HAL_RTC_Init>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000844:	f000 f97c 	bl	8000b40 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 9750, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000848:	4908      	ldr	r1, [pc, #32]	; (800086c <MX_RTC_Init+0x68>)
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_RTC_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	0018      	movs	r0, r3
 8000850:	f002 f9ce 	bl	8002bf0 <HAL_RTCEx_SetWakeUpTimer>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000858:	f000 f972 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20000074 	.word	0x20000074
 8000868:	40002800 	.word	0x40002800
 800086c:	00002616 	.word	0x00002616

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART2_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2400;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800087c:	2296      	movs	r2, #150	; 0x96
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f002 fa3b 	bl	8002d30 <HAL_UART_Init>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f93f 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000098 	.word	0x20000098
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART5_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_USART5_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 2400;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART5_UART_Init+0x58>)
 80008dc:	2296      	movs	r2, #150	; 0x96
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART5_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USART5_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART5_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART5_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART5_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART5_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART5_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART5_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <MX_USART5_UART_Init+0x58>)
 8000914:	0018      	movs	r0, r3
 8000916:	f002 fa0b 	bl	8002d30 <HAL_UART_Init>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f90f 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000011c 	.word	0x2000011c
 800092c:	40005000 	.word	0x40005000

08000930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_DMA_Init+0x38>)
 8000938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_DMA_Init+0x38>)
 800093c:	2101      	movs	r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	631a      	str	r2, [r3, #48]	; 0x30
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_DMA_Init+0x38>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	2201      	movs	r2, #1
 8000948:	4013      	ands	r3, r2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	200b      	movs	r0, #11
 8000954:	f000 fbcc 	bl	80010f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000958:	200b      	movs	r0, #11
 800095a:	f000 fbde 	bl	800111a <HAL_NVIC_EnableIRQ>

}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40021000 	.word	0x40021000

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b08b      	sub	sp, #44	; 0x2c
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	2414      	movs	r4, #20
 8000974:	193b      	adds	r3, r7, r4
 8000976:	0018      	movs	r0, r3
 8000978:	2314      	movs	r3, #20
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f002 ff57 	bl	8003830 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <MX_GPIO_Init+0x12c>)
 8000984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000986:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <MX_GPIO_Init+0x12c>)
 8000988:	2104      	movs	r1, #4
 800098a:	430a      	orrs	r2, r1
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
 800098e:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <MX_GPIO_Init+0x12c>)
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	2204      	movs	r2, #4
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <MX_GPIO_Init+0x12c>)
 800099c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800099e:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <MX_GPIO_Init+0x12c>)
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	430a      	orrs	r2, r1
 80009a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009a6:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <MX_GPIO_Init+0x12c>)
 80009a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <MX_GPIO_Init+0x12c>)
 80009b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009b6:	4b38      	ldr	r3, [pc, #224]	; (8000a98 <MX_GPIO_Init+0x12c>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	430a      	orrs	r2, r1
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80009be:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <MX_GPIO_Init+0x12c>)
 80009c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c2:	2201      	movs	r2, #1
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <MX_GPIO_Init+0x12c>)
 80009cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <MX_GPIO_Init+0x12c>)
 80009d0:	2108      	movs	r1, #8
 80009d2:	430a      	orrs	r2, r1
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d6:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <MX_GPIO_Init+0x12c>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	2208      	movs	r2, #8
 80009dc:	4013      	ands	r3, r2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e2:	23a0      	movs	r3, #160	; 0xa0
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	2200      	movs	r2, #0
 80009e8:	2120      	movs	r1, #32
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 fe73 	bl	80016d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_10;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2291      	movs	r2, #145	; 0x91
 80009f4:	0192      	lsls	r2, r2, #6
 80009f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	2288      	movs	r2, #136	; 0x88
 80009fc:	0352      	lsls	r2, r2, #13
 80009fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <MX_GPIO_Init+0x130>)
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	0010      	movs	r0, r2
 8000a0e:	f000 fcc7 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a12:	0021      	movs	r1, r4
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	220f      	movs	r2, #15
 8000a18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2284      	movs	r2, #132	; 0x84
 8000a1e:	0392      	lsls	r2, r2, #14
 8000a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2201      	movs	r2, #1
 8000a26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	000c      	movs	r4, r1
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_GPIO_Init+0x130>)
 8000a2e:	0019      	movs	r1, r3
 8000a30:	0010      	movs	r0, r2
 8000a32:	f000 fcb5 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a36:	0021      	movs	r1, r4
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2220      	movs	r2, #32
 8000a3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2201      	movs	r2, #1
 8000a42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a50:	187a      	adds	r2, r7, r1
 8000a52:	23a0      	movs	r3, #160	; 0xa0
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fca1 	bl	80013a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2103      	movs	r1, #3
 8000a62:	2005      	movs	r0, #5
 8000a64:	f000 fb44 	bl	80010f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a68:	2005      	movs	r0, #5
 8000a6a:	f000 fb56 	bl	800111a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2103      	movs	r1, #3
 8000a72:	2006      	movs	r0, #6
 8000a74:	f000 fb3c 	bl	80010f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000a78:	2006      	movs	r0, #6
 8000a7a:	f000 fb4e 	bl	800111a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2007      	movs	r0, #7
 8000a84:	f000 fb34 	bl	80010f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a88:	2007      	movs	r0, #7
 8000a8a:	f000 fb46 	bl	800111a <HAL_NVIC_EnableIRQ>

}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b00b      	add	sp, #44	; 0x2c
 8000a94:	bd90      	pop	{r4, r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	50000800 	.word	0x50000800

08000aa0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	1dbb      	adds	r3, r7, #6
 8000aaa:	801a      	strh	r2, [r3, #0]
	// TODO: Change Pin
//	update_Keyboard();
	if(last_pin == GPIO_Pin && HAL_GetTick() - last_triggered < 200) {return;}
 8000aac:	1dbb      	adds	r3, r7, #6
 8000aae:	881a      	ldrh	r2, [r3, #0]
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x98>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d107      	bne.n	8000ac8 <HAL_GPIO_EXTI_Callback+0x28>
 8000ab8:	f000 fa64 	bl	8000f84 <HAL_GetTick>
 8000abc:	0002      	movs	r2, r0
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	2bc7      	cmp	r3, #199	; 0xc7
 8000ac6:	d932      	bls.n	8000b2e <HAL_GPIO_EXTI_Callback+0x8e>
//	HAL_Delay(10);
//	if(last_pin == GPIO_Pin && HAL_GetTick() - last_triggered > 50) {
//		counter ++;
//	}
	last_triggered = HAL_GetTick();
 8000ac8:	f000 fa5c 	bl	8000f84 <HAL_GetTick>
 8000acc:	0003      	movs	r3, r0
 8000ace:	001a      	movs	r2, r3
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ad2:	601a      	str	r2, [r3, #0]
	last_pin = GPIO_Pin;
 8000ad4:	1dbb      	adds	r3, r7, #6
 8000ad6:	881a      	ldrh	r2, [r3, #0]
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x98>)
 8000ada:	601a      	str	r2, [r3, #0]
//	if((counter & 1) == 0) return;
	switch(GPIO_Pin){
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	0192      	lsls	r2, r2, #6
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d01e      	beq.n	8000b26 <HAL_GPIO_EXTI_Callback+0x86>
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	4293      	cmp	r3, r2
 8000aee:	dc1f      	bgt.n	8000b30 <HAL_GPIO_EXTI_Callback+0x90>
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d014      	beq.n	8000b1e <HAL_GPIO_EXTI_Callback+0x7e>
 8000af4:	dc1c      	bgt.n	8000b30 <HAL_GPIO_EXTI_Callback+0x90>
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d00d      	beq.n	8000b16 <HAL_GPIO_EXTI_Callback+0x76>
 8000afa:	dc19      	bgt.n	8000b30 <HAL_GPIO_EXTI_Callback+0x90>
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d002      	beq.n	8000b06 <HAL_GPIO_EXTI_Callback+0x66>
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d004      	beq.n	8000b0e <HAL_GPIO_EXTI_Callback+0x6e>
 8000b04:	e014      	b.n	8000b30 <HAL_GPIO_EXTI_Callback+0x90>
		case GPIO_PIN_0:
			fputcc('\1');
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fce0 	bl	80004cc <fputcc>
			break;
 8000b0c:	e010      	b.n	8000b30 <HAL_GPIO_EXTI_Callback+0x90>
		case GPIO_PIN_1:
			fputcc('\2');
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f7ff fcdc 	bl	80004cc <fputcc>
			break;
 8000b14:	e00c      	b.n	8000b30 <HAL_GPIO_EXTI_Callback+0x90>
		case GPIO_PIN_2:
			fputcc('\3');
 8000b16:	2003      	movs	r0, #3
 8000b18:	f7ff fcd8 	bl	80004cc <fputcc>
			break;
 8000b1c:	e008      	b.n	8000b30 <HAL_GPIO_EXTI_Callback+0x90>
		case GPIO_PIN_3:
			fputcc('\4');
 8000b1e:	2004      	movs	r0, #4
 8000b20:	f7ff fcd4 	bl	80004cc <fputcc>
			break;
 8000b24:	e004      	b.n	8000b30 <HAL_GPIO_EXTI_Callback+0x90>
		case GPIO_PIN_13:
			fputcc('z');
 8000b26:	207a      	movs	r0, #122	; 0x7a
 8000b28:	f7ff fcd0 	bl	80004cc <fputcc>
			break;
 8000b2c:	e000      	b.n	8000b30 <HAL_GPIO_EXTI_Callback+0x90>
	if(last_pin == GPIO_Pin && HAL_GetTick() - last_triggered < 200) {return;}
 8000b2e:	46c0      	nop			; (mov r8, r8)
//	counter = 0;
//	HAL_Delay(10);
//
//
//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
}
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	200001ec 	.word	0x200001ec
 8000b3c:	200001e8 	.word	0x200001e8

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <HAL_MspInit+0x24>)
 8000b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x24>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_MspInit+0x24>)
 8000b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_MspInit+0x24>)
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	0549      	lsls	r1, r1, #21
 8000b66:	430a      	orrs	r2, r1
 8000b68:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	240c      	movs	r4, #12
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2314      	movs	r3, #20
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f002 fe52 	bl	8003830 <memset>
  if(hi2c->Instance==I2C1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_I2C_MspInit+0x80>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12a      	bne.n	8000bec <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	22c0      	movs	r2, #192	; 0xc0
 8000bb2:	00d2      	lsls	r2, r2, #3
 8000bb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb6:	0021      	movs	r1, r4
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2212      	movs	r2, #18
 8000bbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2206      	movs	r2, #6
 8000bce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	187a      	adds	r2, r7, r1
 8000bd2:	23a0      	movs	r3, #160	; 0xa0
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fbe1 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	0389      	lsls	r1, r1, #14
 8000be8:	430a      	orrs	r2, r1
 8000bea:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b009      	add	sp, #36	; 0x24
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	40021000 	.word	0x40021000

08000bfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <HAL_RTC_MspInit+0x28>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d106      	bne.n	8000c1c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_RTC_MspInit+0x2c>)
 8000c10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_RTC_MspInit+0x2c>)
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	02c9      	lsls	r1, r1, #11
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40002800 	.word	0x40002800
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b08b      	sub	sp, #44	; 0x2c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	2414      	movs	r4, #20
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f002 fdf6 	bl	8003830 <memset>
  if(huart->Instance==USART2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a56      	ldr	r2, [pc, #344]	; (8000da4 <HAL_UART_MspInit+0x178>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d153      	bne.n	8000cf6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4e:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c52:	4b55      	ldr	r3, [pc, #340]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	0289      	lsls	r1, r1, #10
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b52      	ldr	r3, [pc, #328]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c60:	4b51      	ldr	r3, [pc, #324]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000c62:	2101      	movs	r1, #1
 8000c64:	430a      	orrs	r2, r1
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c68:	4b4f      	ldr	r3, [pc, #316]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c74:	0021      	movs	r1, r4
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	220c      	movs	r2, #12
 8000c7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2202      	movs	r2, #2
 8000c80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2204      	movs	r2, #4
 8000c92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	187a      	adds	r2, r7, r1
 8000c96:	23a0      	movs	r3, #160	; 0xa0
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f000 fb7f 	bl	80013a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000ca2:	4b42      	ldr	r3, [pc, #264]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000ca4:	4a42      	ldr	r2, [pc, #264]	; (8000db0 <HAL_UART_MspInit+0x184>)
 8000ca6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000ca8:	4b40      	ldr	r3, [pc, #256]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cae:	4b3f      	ldr	r3, [pc, #252]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb4:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cba:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc0:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc6:	4b39      	ldr	r3, [pc, #228]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ccc:	4b37      	ldr	r3, [pc, #220]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd2:	4b36      	ldr	r3, [pc, #216]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cd8:	4b34      	ldr	r3, [pc, #208]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 fa3a 	bl	8001154 <HAL_DMA_Init>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8000ce4:	f7ff ff2c 	bl	8000b40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a30      	ldr	r2, [pc, #192]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000cec:	671a      	str	r2, [r3, #112]	; 0x70
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000cf4:	e051      	b.n	8000d9a <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART5)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a2e      	ldr	r2, [pc, #184]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d14c      	bne.n	8000d9a <HAL_UART_MspInit+0x16e>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d04:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	0349      	lsls	r1, r1, #13
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000d14:	2104      	movs	r1, #4
 8000d16:	430a      	orrs	r2, r1
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1e:	2204      	movs	r2, #4
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000d2c:	2108      	movs	r1, #8
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	2208      	movs	r2, #8
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d3e:	2114      	movs	r1, #20
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	0152      	lsls	r2, r2, #5
 8000d46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	000c      	movs	r4, r1
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2203      	movs	r2, #3
 8000d5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	2202      	movs	r2, #2
 8000d60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <HAL_UART_MspInit+0x18c>)
 8000d66:	0019      	movs	r1, r3
 8000d68:	0010      	movs	r0, r2
 8000d6a:	f000 fb19 	bl	80013a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d6e:	0021      	movs	r1, r4
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2204      	movs	r2, #4
 8000d74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2202      	movs	r2, #2
 8000d7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2203      	movs	r2, #3
 8000d86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2206      	movs	r2, #6
 8000d8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d92:	0019      	movs	r1, r3
 8000d94:	0010      	movs	r0, r2
 8000d96:	f000 fb03 	bl	80013a0 <HAL_GPIO_Init>
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b00b      	add	sp, #44	; 0x2c
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40021000 	.word	0x40021000
 8000dac:	200001a0 	.word	0x200001a0
 8000db0:	40020058 	.word	0x40020058
 8000db4:	40005000 	.word	0x40005000
 8000db8:	50000800 	.word	0x50000800
 8000dbc:	50000c00 	.word	0x50000c00

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f8bc 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f000 fca8 	bl	8001748 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f000 fca5 	bl	8001748 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e08:	2004      	movs	r0, #4
 8000e0a:	f000 fc9d 	bl	8001748 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000e0e:	2008      	movs	r0, #8
 8000e10:	f000 fc9a 	bl	8001748 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e1e:	2040      	movs	r0, #64	; 0x40
 8000e20:	f000 fc92 	bl	8001748 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fc8d 	bl	8001748 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 fc88 	bl	8001748 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 f9fc 	bl	8001244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	200001a0 	.word	0x200001a0

08000e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6a:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <LoopForever+0xe>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e80:	4c0b      	ldr	r4, [pc, #44]	; (8000eb0 <LoopForever+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e8e:	f7ff ffe3 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f002 fca9 	bl	80037e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fb89 	bl	80005ac <main>

08000e9a <LoopForever>:

LoopForever:
    b LoopForever
 8000e9a:	e7fe      	b.n	8000e9a <LoopForever>
   ldr   r0, =_estack
 8000e9c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ea8:	080038dc 	.word	0x080038dc
  ldr r2, =_sbss
 8000eac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eb0:	200001fc 	.word	0x200001fc

08000eb4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_COMP_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_Init+0x3c>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_Init+0x3c>)
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 f811 	bl	8000ef8 <HAL_InitTick>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	e001      	b.n	8000ee6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee2:	f7ff fe33 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40022000 	.word	0x40022000

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_InitTick+0x5c>)
 8000f02:	681c      	ldr	r4, [r3, #0]
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_InitTick+0x60>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	0019      	movs	r1, r3
 8000f0a:	23fa      	movs	r3, #250	; 0xfa
 8000f0c:	0098      	lsls	r0, r3, #2
 8000f0e:	f7ff f8fb 	bl	8000108 <__udivsi3>
 8000f12:	0003      	movs	r3, r0
 8000f14:	0019      	movs	r1, r3
 8000f16:	0020      	movs	r0, r4
 8000f18:	f7ff f8f6 	bl	8000108 <__udivsi3>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 f90b 	bl	800113a <HAL_SYSTICK_Config>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e00f      	b.n	8000f4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d80b      	bhi.n	8000f4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	2301      	movs	r3, #1
 8000f36:	425b      	negs	r3, r3
 8000f38:	2200      	movs	r2, #0
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 f8d8 	bl	80010f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_InitTick+0x64>)
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b003      	add	sp, #12
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_IncTick+0x1c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	001a      	movs	r2, r3
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_IncTick+0x20>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	18d2      	adds	r2, r2, r3
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_IncTick+0x20>)
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	200001f8 	.word	0x200001f8

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b02      	ldr	r3, [pc, #8]	; (8000f94 <HAL_GetTick+0x10>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	200001f8 	.word	0x200001f8

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8000faa:	d809      	bhi.n	8000fc0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	231f      	movs	r3, #31
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_EnableIRQ+0x30>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4091      	lsls	r1, r2
 8000fbc:	000a      	movs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
  }
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe0:	d828      	bhi.n	8001034 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe2:	4a2f      	ldr	r2, [pc, #188]	; (80010a0 <__NVIC_SetPriority+0xd4>)
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	33c0      	adds	r3, #192	; 0xc0
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	589b      	ldr	r3, [r3, r2]
 8000ff2:	1dfa      	adds	r2, r7, #7
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	00d2      	lsls	r2, r2, #3
 8000ffe:	21ff      	movs	r1, #255	; 0xff
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	43d2      	mvns	r2, r2
 8001006:	401a      	ands	r2, r3
 8001008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	401a      	ands	r2, r3
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0018      	movs	r0, r3
 8001018:	2303      	movs	r3, #3
 800101a:	4003      	ands	r3, r0
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001020:	481f      	ldr	r0, [pc, #124]	; (80010a0 <__NVIC_SetPriority+0xd4>)
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b25b      	sxtb	r3, r3
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	430a      	orrs	r2, r1
 800102c:	33c0      	adds	r3, #192	; 0xc0
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001032:	e031      	b.n	8001098 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <__NVIC_SetPriority+0xd8>)
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	0019      	movs	r1, r3
 800103c:	230f      	movs	r3, #15
 800103e:	400b      	ands	r3, r1
 8001040:	3b08      	subs	r3, #8
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3306      	adds	r3, #6
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	18d3      	adds	r3, r2, r3
 800104a:	3304      	adds	r3, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	1dfa      	adds	r2, r7, #7
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	0011      	movs	r1, r2
 8001054:	2203      	movs	r2, #3
 8001056:	400a      	ands	r2, r1
 8001058:	00d2      	lsls	r2, r2, #3
 800105a:	21ff      	movs	r1, #255	; 0xff
 800105c:	4091      	lsls	r1, r2
 800105e:	000a      	movs	r2, r1
 8001060:	43d2      	mvns	r2, r2
 8001062:	401a      	ands	r2, r3
 8001064:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	019b      	lsls	r3, r3, #6
 800106a:	22ff      	movs	r2, #255	; 0xff
 800106c:	401a      	ands	r2, r3
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	0018      	movs	r0, r3
 8001074:	2303      	movs	r3, #3
 8001076:	4003      	ands	r3, r0
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <__NVIC_SetPriority+0xd8>)
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	001c      	movs	r4, r3
 8001084:	230f      	movs	r3, #15
 8001086:	4023      	ands	r3, r4
 8001088:	3b08      	subs	r3, #8
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	430a      	orrs	r2, r1
 800108e:	3306      	adds	r3, #6
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	18c3      	adds	r3, r0, r3
 8001094:	3304      	adds	r3, #4
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b003      	add	sp, #12
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1e5a      	subs	r2, r3, #1
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	045b      	lsls	r3, r3, #17
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d301      	bcc.n	80010c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010bc:	2301      	movs	r3, #1
 80010be:	e010      	b.n	80010e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <SysTick_Config+0x44>)
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	3a01      	subs	r2, #1
 80010c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c8:	2301      	movs	r3, #1
 80010ca:	425b      	negs	r3, r3
 80010cc:	2103      	movs	r1, #3
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff ff7c 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x44>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x44>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	210f      	movs	r1, #15
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	1c02      	adds	r2, r0, #0
 8001100:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	187b      	adds	r3, r7, r1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b004      	add	sp, #16
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	0002      	movs	r2, r0
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b25b      	sxtb	r3, r3
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff ff33 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ffaf 	bl	80010a8 <SysTick_Config>
 800114a:	0003      	movs	r3, r0
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e061      	b.n	800122a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a32      	ldr	r2, [pc, #200]	; (8001234 <HAL_DMA_Init+0xe0>)
 800116c:	4694      	mov	ip, r2
 800116e:	4463      	add	r3, ip
 8001170:	2114      	movs	r1, #20
 8001172:	0018      	movs	r0, r3
 8001174:	f7fe ffc8 	bl	8000108 <__udivsi3>
 8001178:	0003      	movs	r3, r0
 800117a:	009a      	lsls	r2, r3, #2
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <HAL_DMA_Init+0xe4>)
 8001184:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2225      	movs	r2, #37	; 0x25
 800118a:	2102      	movs	r1, #2
 800118c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4a28      	ldr	r2, [pc, #160]	; (800123c <HAL_DMA_Init+0xe8>)
 800119a:	4013      	ands	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80011a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	01db      	lsls	r3, r3, #7
 80011dc:	429a      	cmp	r2, r3
 80011de:	d018      	beq.n	8001212 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_DMA_Init+0xec>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	211c      	movs	r1, #28
 80011ea:	400b      	ands	r3, r1
 80011ec:	210f      	movs	r1, #15
 80011ee:	4099      	lsls	r1, r3
 80011f0:	000b      	movs	r3, r1
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_DMA_Init+0xec>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_DMA_Init+0xec>)
 80011fc:	6819      	ldr	r1, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	201c      	movs	r0, #28
 8001208:	4003      	ands	r3, r0
 800120a:	409a      	lsls	r2, r3
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_DMA_Init+0xec>)
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2225      	movs	r2, #37	; 0x25
 800121c:	2101      	movs	r1, #1
 800121e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2224      	movs	r2, #36	; 0x24
 8001224:	2100      	movs	r1, #0
 8001226:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	bffdfff8 	.word	0xbffdfff8
 8001238:	40020000 	.word	0x40020000
 800123c:	ffff800f 	.word	0xffff800f
 8001240:	400200a8 	.word	0x400200a8

08001244 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	221c      	movs	r2, #28
 8001262:	4013      	ands	r3, r2
 8001264:	2204      	movs	r2, #4
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4013      	ands	r3, r2
 800126e:	d026      	beq.n	80012be <HAL_DMA_IRQHandler+0x7a>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2204      	movs	r2, #4
 8001274:	4013      	ands	r3, r2
 8001276:	d022      	beq.n	80012be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2220      	movs	r2, #32
 8001280:	4013      	ands	r3, r2
 8001282:	d107      	bne.n	8001294 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2104      	movs	r1, #4
 8001290:	438a      	bics	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	221c      	movs	r2, #28
 800129a:	401a      	ands	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2104      	movs	r1, #4
 80012a2:	4091      	lsls	r1, r2
 80012a4:	000a      	movs	r2, r1
 80012a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d100      	bne.n	80012b2 <HAL_DMA_IRQHandler+0x6e>
 80012b0:	e071      	b.n	8001396 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	0010      	movs	r0, r2
 80012ba:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80012bc:	e06b      	b.n	8001396 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	221c      	movs	r2, #28
 80012c4:	4013      	ands	r3, r2
 80012c6:	2202      	movs	r2, #2
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	d02d      	beq.n	800132e <HAL_DMA_IRQHandler+0xea>
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2202      	movs	r2, #2
 80012d6:	4013      	ands	r3, r2
 80012d8:	d029      	beq.n	800132e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2220      	movs	r2, #32
 80012e2:	4013      	ands	r3, r2
 80012e4:	d10b      	bne.n	80012fe <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	210a      	movs	r1, #10
 80012f2:	438a      	bics	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2225      	movs	r2, #37	; 0x25
 80012fa:	2101      	movs	r1, #1
 80012fc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	221c      	movs	r2, #28
 8001304:	401a      	ands	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2102      	movs	r1, #2
 800130c:	4091      	lsls	r1, r2
 800130e:	000a      	movs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2224      	movs	r2, #36	; 0x24
 8001316:	2100      	movs	r1, #0
 8001318:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	2b00      	cmp	r3, #0
 8001320:	d039      	beq.n	8001396 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	0010      	movs	r0, r2
 800132a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800132c:	e033      	b.n	8001396 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	221c      	movs	r2, #28
 8001334:	4013      	ands	r3, r2
 8001336:	2208      	movs	r2, #8
 8001338:	409a      	lsls	r2, r3
 800133a:	0013      	movs	r3, r2
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4013      	ands	r3, r2
 8001340:	d02a      	beq.n	8001398 <HAL_DMA_IRQHandler+0x154>
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2208      	movs	r2, #8
 8001346:	4013      	ands	r3, r2
 8001348:	d026      	beq.n	8001398 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	210e      	movs	r1, #14
 8001356:	438a      	bics	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	221c      	movs	r2, #28
 8001360:	401a      	ands	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	2101      	movs	r1, #1
 8001368:	4091      	lsls	r1, r2
 800136a:	000a      	movs	r2, r1
 800136c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2225      	movs	r2, #37	; 0x25
 8001378:	2101      	movs	r1, #1
 800137a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2224      	movs	r2, #36	; 0x24
 8001380:	2100      	movs	r1, #0
 8001382:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	0010      	movs	r0, r2
 8001394:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46c0      	nop			; (mov r8, r8)
}
 800139a:	46bd      	mov	sp, r7
 800139c:	b004      	add	sp, #16
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013b6:	e155      	b.n	8001664 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2101      	movs	r1, #1
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4091      	lsls	r1, r2
 80013c2:	000a      	movs	r2, r1
 80013c4:	4013      	ands	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d100      	bne.n	80013d0 <HAL_GPIO_Init+0x30>
 80013ce:	e146      	b.n	800165e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d005      	beq.n	80013e8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d130      	bne.n	800144a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	409a      	lsls	r2, r3
 80013f6:	0013      	movs	r3, r2
 80013f8:	43da      	mvns	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	409a      	lsls	r2, r3
 800140a:	0013      	movs	r3, r2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141e:	2201      	movs	r2, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	2201      	movs	r2, #1
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	4013      	ands	r3, r2
 8001452:	2b03      	cmp	r3, #3
 8001454:	d017      	beq.n	8001486 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	43da      	mvns	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2203      	movs	r2, #3
 800148c:	4013      	ands	r3, r2
 800148e:	2b02      	cmp	r3, #2
 8001490:	d123      	bne.n	80014da <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	58d3      	ldr	r3, [r2, r3]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2207      	movs	r2, #7
 80014a4:	4013      	ands	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2107      	movs	r1, #7
 80014be:	400b      	ands	r3, r1
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	6939      	ldr	r1, [r7, #16]
 80014d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	401a      	ands	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	23c0      	movs	r3, #192	; 0xc0
 8001514:	029b      	lsls	r3, r3, #10
 8001516:	4013      	ands	r3, r2
 8001518:	d100      	bne.n	800151c <HAL_GPIO_Init+0x17c>
 800151a:	e0a0      	b.n	800165e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151c:	4b57      	ldr	r3, [pc, #348]	; (800167c <HAL_GPIO_Init+0x2dc>)
 800151e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001520:	4b56      	ldr	r3, [pc, #344]	; (800167c <HAL_GPIO_Init+0x2dc>)
 8001522:	2101      	movs	r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001528:	4a55      	ldr	r2, [pc, #340]	; (8001680 <HAL_GPIO_Init+0x2e0>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	589b      	ldr	r3, [r3, r2]
 8001534:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2203      	movs	r2, #3
 800153a:	4013      	ands	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	409a      	lsls	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	43da      	mvns	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	23a0      	movs	r3, #160	; 0xa0
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	429a      	cmp	r2, r3
 8001554:	d01f      	beq.n	8001596 <HAL_GPIO_Init+0x1f6>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4a      	ldr	r2, [pc, #296]	; (8001684 <HAL_GPIO_Init+0x2e4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x1f2>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a49      	ldr	r2, [pc, #292]	; (8001688 <HAL_GPIO_Init+0x2e8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x1ee>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a48      	ldr	r2, [pc, #288]	; (800168c <HAL_GPIO_Init+0x2ec>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x1ea>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a47      	ldr	r2, [pc, #284]	; (8001690 <HAL_GPIO_Init+0x2f0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x1e6>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a46      	ldr	r2, [pc, #280]	; (8001694 <HAL_GPIO_Init+0x2f4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x1e2>
 800157e:	2305      	movs	r3, #5
 8001580:	e00a      	b.n	8001598 <HAL_GPIO_Init+0x1f8>
 8001582:	2306      	movs	r3, #6
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x1f8>
 8001586:	2304      	movs	r3, #4
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x1f8>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x1f8>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x1f8>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x1f8>
 8001596:	2300      	movs	r3, #0
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	2103      	movs	r1, #3
 800159c:	400a      	ands	r2, r1
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	; (8001680 <HAL_GPIO_Init+0x2e0>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_GPIO_Init+0x2f8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	43da      	mvns	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	4013      	ands	r3, r2
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_GPIO_Init+0x2f8>)
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_GPIO_Init+0x2f8>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43da      	mvns	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	4013      	ands	r3, r2
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_GPIO_Init+0x2f8>)
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_GPIO_Init+0x2f8>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43da      	mvns	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	035b      	lsls	r3, r3, #13
 8001622:	4013      	ands	r3, r2
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_GPIO_Init+0x2f8>)
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_GPIO_Init+0x2f8>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43da      	mvns	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	039b      	lsls	r3, r3, #14
 800164c:	4013      	ands	r3, r2
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_GPIO_Init+0x2f8>)
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	40da      	lsrs	r2, r3
 800166c:	1e13      	subs	r3, r2, #0
 800166e:	d000      	beq.n	8001672 <HAL_GPIO_Init+0x2d2>
 8001670:	e6a2      	b.n	80013b8 <HAL_GPIO_Init+0x18>
  }
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b006      	add	sp, #24
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000
 8001684:	50000400 	.word	0x50000400
 8001688:	50000800 	.word	0x50000800
 800168c:	50000c00 	.word	0x50000c00
 8001690:	50001000 	.word	0x50001000
 8001694:	50001c00 	.word	0x50001c00
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	000a      	movs	r2, r1
 80016a6:	1cbb      	adds	r3, r7, #2
 80016a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	1cba      	adds	r2, r7, #2
 80016b0:	8812      	ldrh	r2, [r2, #0]
 80016b2:	4013      	ands	r3, r2
 80016b4:	d004      	beq.n	80016c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80016b6:	230f      	movs	r3, #15
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	e003      	b.n	80016c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c0:	230f      	movs	r3, #15
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80016c8:	230f      	movs	r3, #15
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	781b      	ldrb	r3, [r3, #0]
}
 80016ce:	0018      	movs	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b004      	add	sp, #16
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	0008      	movs	r0, r1
 80016e0:	0011      	movs	r1, r2
 80016e2:	1cbb      	adds	r3, r7, #2
 80016e4:	1c02      	adds	r2, r0, #0
 80016e6:	801a      	strh	r2, [r3, #0]
 80016e8:	1c7b      	adds	r3, r7, #1
 80016ea:	1c0a      	adds	r2, r1, #0
 80016ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ee:	1c7b      	adds	r3, r7, #1
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f6:	1cbb      	adds	r3, r7, #2
 80016f8:	881a      	ldrh	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80016fe:	e003      	b.n	8001708 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001700:	1cbb      	adds	r3, r7, #2
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	000a      	movs	r2, r1
 800171a:	1cbb      	adds	r3, r7, #2
 800171c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001724:	1cbb      	adds	r3, r7, #2
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	041a      	lsls	r2, r3, #16
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	1cb9      	adds	r1, r7, #2
 8001734:	8809      	ldrh	r1, [r1, #0]
 8001736:	400b      	ands	r3, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b004      	add	sp, #16
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	0002      	movs	r2, r0
 8001750:	1dbb      	adds	r3, r7, #6
 8001752:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	1dba      	adds	r2, r7, #6
 800175a:	8812      	ldrh	r2, [r2, #0]
 800175c:	4013      	ands	r3, r2
 800175e:	d008      	beq.n	8001772 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001762:	1dba      	adds	r2, r7, #6
 8001764:	8812      	ldrh	r2, [r2, #0]
 8001766:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001768:	1dbb      	adds	r3, r7, #6
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	0018      	movs	r0, r3
 800176e:	f7ff f997 	bl	8000aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b002      	add	sp, #8
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	40010400 	.word	0x40010400

08001780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e082      	b.n	8001898 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2241      	movs	r2, #65	; 0x41
 8001796:	5c9b      	ldrb	r3, [r3, r2]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d107      	bne.n	80017ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	2100      	movs	r1, #0
 80017a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff f9e3 	bl	8000b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2241      	movs	r2, #65	; 0x41
 80017b2:	2124      	movs	r1, #36	; 0x24
 80017b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2101      	movs	r1, #1
 80017c2:	438a      	bics	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4934      	ldr	r1, [pc, #208]	; (80018a0 <HAL_I2C_Init+0x120>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4931      	ldr	r1, [pc, #196]	; (80018a4 <HAL_I2C_Init+0x124>)
 80017e0:	400a      	ands	r2, r1
 80017e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d108      	bne.n	80017fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0209      	lsls	r1, r1, #8
 80017f8:	430a      	orrs	r2, r1
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	e007      	b.n	800180e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2184      	movs	r1, #132	; 0x84
 8001808:	0209      	lsls	r1, r1, #8
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d104      	bne.n	8001820 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	491f      	ldr	r1, [pc, #124]	; (80018a8 <HAL_I2C_Init+0x128>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	491a      	ldr	r1, [pc, #104]	; (80018a4 <HAL_I2C_Init+0x124>)
 800183c:	400a      	ands	r2, r1
 800183e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	431a      	orrs	r2, r3
 800184a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69d9      	ldr	r1, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2241      	movs	r2, #65	; 0x41
 8001884:	2120      	movs	r1, #32
 8001886:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2242      	movs	r2, #66	; 0x42
 8001892:	2100      	movs	r1, #0
 8001894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b002      	add	sp, #8
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	f0ffffff 	.word	0xf0ffffff
 80018a4:	ffff7fff 	.word	0xffff7fff
 80018a8:	02008000 	.word	0x02008000

080018ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2241      	movs	r2, #65	; 0x41
 80018ba:	5c9b      	ldrb	r3, [r3, r2]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b20      	cmp	r3, #32
 80018c0:	d138      	bne.n	8001934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	5c9b      	ldrb	r3, [r3, r2]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e032      	b.n	8001936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2240      	movs	r2, #64	; 0x40
 80018d4:	2101      	movs	r1, #1
 80018d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2241      	movs	r2, #65	; 0x41
 80018dc:	2124      	movs	r1, #36	; 0x24
 80018de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2101      	movs	r1, #1
 80018ec:	438a      	bics	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4911      	ldr	r1, [pc, #68]	; (8001940 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2101      	movs	r1, #1
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2241      	movs	r2, #65	; 0x41
 8001924:	2120      	movs	r1, #32
 8001926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
  }
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	ffffefff 	.word	0xffffefff

08001944 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2241      	movs	r2, #65	; 0x41
 8001952:	5c9b      	ldrb	r3, [r3, r2]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b20      	cmp	r3, #32
 8001958:	d139      	bne.n	80019ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2240      	movs	r2, #64	; 0x40
 800195e:	5c9b      	ldrb	r3, [r3, r2]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001964:	2302      	movs	r3, #2
 8001966:	e033      	b.n	80019d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	2101      	movs	r1, #1
 800196e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2241      	movs	r2, #65	; 0x41
 8001974:	2124      	movs	r1, #36	; 0x24
 8001976:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2101      	movs	r1, #1
 8001984:	438a      	bics	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2241      	movs	r2, #65	; 0x41
 80019be:	2120      	movs	r1, #32
 80019c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2240      	movs	r2, #64	; 0x40
 80019c6:	2100      	movs	r1, #0
 80019c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e000      	b.n	80019d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019ce:	2302      	movs	r3, #2
  }
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b004      	add	sp, #16
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	fffff0ff 	.word	0xfffff0ff

080019dc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	000a      	movs	r2, r1
 80019e6:	1cfb      	adds	r3, r7, #3
 80019e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_PWR_EnterSTOPMode+0xac>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2201      	movs	r2, #1
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <HAL_PWR_EnterSTOPMode+0x40>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001a16:	491d      	ldr	r1, [pc, #116]	; (8001a8c <HAL_PWR_EnterSTOPMode+0xb0>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4393      	bics	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001a3e:	2104      	movs	r1, #4
 8001a40:	430a      	orrs	r2, r1
 8001a42:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001a44:	1cfb      	adds	r3, r7, #3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001a4c:	bf30      	wfi
 8001a4e:	e002      	b.n	8001a56 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001a50:	bf40      	sev
    __WFE();
 8001a52:	bf20      	wfe
    __WFE();
 8001a54:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	438a      	bics	r2, r1
 8001a60:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <HAL_PWR_EnterSTOPMode+0xa0>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	0089      	lsls	r1, r1, #2
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
  }
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b006      	add	sp, #24
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40007000 	.word	0x40007000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	fffffdff 	.word	0xfffffdff
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <HAL_PWREx_EnableLowPowerRunMode>:
  *         frequency of RCC_MSIRANGE_1.
  * @note   In Low power run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Enters the Low Power Run mode */
  SET_BIT(PWR->CR, PWR_CR_LPSDSR);
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_PWREx_EnableLowPowerRunMode+0x24>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_PWREx_EnableLowPowerRunMode+0x24>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR, PWR_CR_LPRUN);
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_PWREx_EnableLowPowerRunMode+0x24>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_PWREx_EnableLowPowerRunMode+0x24>)
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	01c9      	lsls	r1, r1, #7
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40007000 	.word	0x40007000

08001abc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.   
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
  
  /* Exit the Low Power Run mode */
  CLEAR_BIT(PWR->CR, PWR_CR_LPRUN);
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001acc:	4917      	ldr	r1, [pc, #92]	; (8001b2c <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(PWR->CR, PWR_CR_LPSDSR);
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001ad8:	2101      	movs	r1, #1
 8001ada:	438a      	bics	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
  
  /* Wait until REGLPF is reset */
  wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000U));
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_PWREx_DisableLowPowerRunMode+0x74>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4914      	ldr	r1, [pc, #80]	; (8001b34 <HAL_PWREx_DisableLowPowerRunMode+0x78>)
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7fe fb0f 	bl	8000108 <__udivsi3>
 8001aea:	0003      	movs	r3, r0
 8001aec:	001a      	movs	r2, r3
 8001aee:	2332      	movs	r3, #50	; 0x32
 8001af0:	4353      	muls	r3, r2
 8001af2:	607b      	str	r3, [r7, #4]

  while ((wait_loop_index != 0U) && (HAL_IS_BIT_SET(PWR->CSR, PWR_CSR_REGLPF)))
 8001af4:	e002      	b.n	8001afc <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    wait_loop_index--;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	607b      	str	r3, [r7, #4]
  while ((wait_loop_index != 0U) && (HAL_IS_BIT_SET(PWR->CSR, PWR_CSR_REGLPF)))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_PWREx_DisableLowPowerRunMode+0x52>
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d0f3      	beq.n	8001af6 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  }

  if (HAL_IS_BIT_SET(PWR->CSR, PWR_CSR_REGLPF))
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	d101      	bne.n	8001b1e <HAL_PWREx_DisableLowPowerRunMode+0x62>
  {
    return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e000      	b.n	8001b20 <HAL_PWREx_DisableLowPowerRunMode+0x64>
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	ffffbfff 	.word	0xffffbfff
 8001b30:	20000000 	.word	0x20000000
 8001b34:	000f4240 	.word	0x000f4240

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	f000 fbbf 	bl	80022ca <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4c:	4bc9      	ldr	r3, [pc, #804]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	220c      	movs	r2, #12
 8001b52:	4013      	ands	r3, r2
 8001b54:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b56:	4bc7      	ldr	r3, [pc, #796]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	025b      	lsls	r3, r3, #9
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2201      	movs	r2, #1
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d100      	bne.n	8001b6e <HAL_RCC_OscConfig+0x36>
 8001b6c:	e07e      	b.n	8001c6c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d007      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d112      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x68>
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d10d      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	4bbb      	ldr	r3, [pc, #748]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	029b      	lsls	r3, r3, #10
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d100      	bne.n	8001b92 <HAL_RCC_OscConfig+0x5a>
 8001b90:	e06b      	b.n	8001c6a <HAL_RCC_OscConfig+0x132>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d167      	bne.n	8001c6a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f000 fb95 	bl	80022ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	025b      	lsls	r3, r3, #9
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x84>
 8001bac:	4bb1      	ldr	r3, [pc, #708]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4bb0      	ldr	r3, [pc, #704]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	0249      	lsls	r1, r1, #9
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	e027      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	23a0      	movs	r3, #160	; 0xa0
 8001bc2:	02db      	lsls	r3, r3, #11
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d10e      	bne.n	8001be6 <HAL_RCC_OscConfig+0xae>
 8001bc8:	4baa      	ldr	r3, [pc, #680]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4ba9      	ldr	r3, [pc, #676]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	02c9      	lsls	r1, r1, #11
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	4ba7      	ldr	r3, [pc, #668]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4ba6      	ldr	r3, [pc, #664]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	0249      	lsls	r1, r1, #9
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e012      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001be6:	4ba3      	ldr	r3, [pc, #652]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4ba2      	ldr	r3, [pc, #648]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001bec:	49a2      	ldr	r1, [pc, #648]	; (8001e78 <HAL_RCC_OscConfig+0x340>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	4ba0      	ldr	r3, [pc, #640]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	025b      	lsls	r3, r3, #9
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4b9c      	ldr	r3, [pc, #624]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b9b      	ldr	r3, [pc, #620]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001c06:	499d      	ldr	r1, [pc, #628]	; (8001e7c <HAL_RCC_OscConfig+0x344>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d015      	beq.n	8001c40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff f9b6 	bl	8000f84 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1e:	f7ff f9b1 	bl	8000f84 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b64      	cmp	r3, #100	; 0x64
 8001c2a:	d902      	bls.n	8001c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	f000 fb4c 	bl	80022ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c32:	4b90      	ldr	r3, [pc, #576]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	029b      	lsls	r3, r3, #10
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d0ef      	beq.n	8001c1e <HAL_RCC_OscConfig+0xe6>
 8001c3e:	e015      	b.n	8001c6c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff f9a0 	bl	8000f84 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c4a:	f7ff f99b 	bl	8000f84 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b64      	cmp	r3, #100	; 0x64
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e336      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c5c:	4b85      	ldr	r3, [pc, #532]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	029b      	lsls	r3, r3, #10
 8001c64:	4013      	ands	r3, r2
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x112>
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2202      	movs	r2, #2
 8001c72:	4013      	ands	r3, r2
 8001c74:	d100      	bne.n	8001c78 <HAL_RCC_OscConfig+0x140>
 8001c76:	e099      	b.n	8001dac <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	2220      	movs	r2, #32
 8001c82:	4013      	ands	r3, r2
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c86:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001c8c:	2120      	movs	r1, #32
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	2220      	movs	r2, #32
 8001c96:	4393      	bics	r3, r2
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d13e      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1ec>
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d13b      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001cac:	4b71      	ldr	r3, [pc, #452]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x188>
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e304      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b6c      	ldr	r3, [pc, #432]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <HAL_RCC_OscConfig+0x348>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	0019      	movs	r1, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	021a      	lsls	r2, r3, #8
 8001cd0:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cd6:	4b67      	ldr	r3, [pc, #412]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2209      	movs	r2, #9
 8001cdc:	4393      	bics	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ce8:	f000 fc42 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8001cec:	0001      	movs	r1, r0
 8001cee:	4b61      	ldr	r3, [pc, #388]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	4a62      	ldr	r2, [pc, #392]	; (8001e84 <HAL_RCC_OscConfig+0x34c>)
 8001cfa:	5cd3      	ldrb	r3, [r2, r3]
 8001cfc:	000a      	movs	r2, r1
 8001cfe:	40da      	lsrs	r2, r3
 8001d00:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <HAL_RCC_OscConfig+0x350>)
 8001d02:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001d04:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <HAL_RCC_OscConfig+0x354>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2513      	movs	r5, #19
 8001d0a:	197c      	adds	r4, r7, r5
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7ff f8f3 	bl	8000ef8 <HAL_InitTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001d16:	197b      	adds	r3, r7, r5
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d046      	beq.n	8001dac <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001d1e:	197b      	adds	r3, r7, r5
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	e2d2      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d027      	beq.n	8001d7a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d2a:	4b52      	ldr	r3, [pc, #328]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2209      	movs	r2, #9
 8001d30:	4393      	bics	r3, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f922 	bl	8000f84 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff f91d 	bl	8000f84 <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e2b8      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d58:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d0f1      	beq.n	8001d46 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b44      	ldr	r3, [pc, #272]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <HAL_RCC_OscConfig+0x348>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	021a      	lsls	r2, r3, #8
 8001d72:	4b40      	ldr	r3, [pc, #256]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001d74:	430a      	orrs	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	e018      	b.n	8001dac <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	438a      	bics	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff f8fd 	bl	8000f84 <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff f8f8 	bl	8000f84 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e293      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001da2:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2204      	movs	r2, #4
 8001da8:	4013      	ands	r3, r2
 8001daa:	d1f1      	bne.n	8001d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2210      	movs	r2, #16
 8001db2:	4013      	ands	r3, r2
 8001db4:	d100      	bne.n	8001db8 <HAL_RCC_OscConfig+0x280>
 8001db6:	e0a2      	b.n	8001efe <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d140      	bne.n	8001e40 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dbe:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d005      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x29e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e279      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd6:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4a2d      	ldr	r2, [pc, #180]	; (8001e90 <HAL_RCC_OscConfig+0x358>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	0019      	movs	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	0a19      	lsrs	r1, r3, #8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	061a      	lsls	r2, r3, #24
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	0b5b      	lsrs	r3, r3, #13
 8001e04:	3301      	adds	r3, #1
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	0212      	lsls	r2, r2, #8
 8001e0a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	210f      	movs	r1, #15
 8001e14:	400b      	ands	r3, r1
 8001e16:	491b      	ldr	r1, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x34c>)
 8001e18:	5ccb      	ldrb	r3, [r1, r3]
 8001e1a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_RCC_OscConfig+0x350>)
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_RCC_OscConfig+0x354>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2513      	movs	r5, #19
 8001e26:	197c      	adds	r4, r7, r5
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff f865 	bl	8000ef8 <HAL_InitTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e32:	197b      	adds	r3, r7, r5
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d061      	beq.n	8001efe <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001e3a:	197b      	adds	r3, r7, r5
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	e244      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d040      	beq.n	8001eca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_OscConfig+0x33c>)
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	0049      	lsls	r1, r1, #1
 8001e52:	430a      	orrs	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7ff f895 	bl	8000f84 <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e5e:	e019      	b.n	8001e94 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e60:	f7ff f890 	bl	8000f84 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d912      	bls.n	8001e94 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e22b      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	40021000 	.word	0x40021000
 8001e78:	fffeffff 	.word	0xfffeffff
 8001e7c:	fffbffff 	.word	0xfffbffff
 8001e80:	ffffe0ff 	.word	0xffffe0ff
 8001e84:	08003860 	.word	0x08003860
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e94:	4bca      	ldr	r3, [pc, #808]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d0df      	beq.n	8001e60 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea0:	4bc7      	ldr	r3, [pc, #796]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4ac7      	ldr	r2, [pc, #796]	; (80021c4 <HAL_RCC_OscConfig+0x68c>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eae:	4bc4      	ldr	r3, [pc, #784]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb4:	4bc2      	ldr	r3, [pc, #776]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	0a19      	lsrs	r1, r3, #8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	061a      	lsls	r2, r3, #24
 8001ec2:	4bbf      	ldr	r3, [pc, #764]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	e019      	b.n	8001efe <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eca:	4bbd      	ldr	r3, [pc, #756]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4bbc      	ldr	r3, [pc, #752]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001ed0:	49bd      	ldr	r1, [pc, #756]	; (80021c8 <HAL_RCC_OscConfig+0x690>)
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff f855 	bl	8000f84 <HAL_GetTick>
 8001eda:	0003      	movs	r3, r0
 8001edc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ee0:	f7ff f850 	bl	8000f84 <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1eb      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ef2:	4bb3      	ldr	r3, [pc, #716]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2208      	movs	r2, #8
 8001f04:	4013      	ands	r3, r2
 8001f06:	d036      	beq.n	8001f76 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d019      	beq.n	8001f44 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f10:	4bab      	ldr	r3, [pc, #684]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f14:	4baa      	ldr	r3, [pc, #680]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f832 	bl	8000f84 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff f82d 	bl	8000f84 <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1c8      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f38:	4ba1      	ldr	r3, [pc, #644]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d0f1      	beq.n	8001f26 <HAL_RCC_OscConfig+0x3ee>
 8001f42:	e018      	b.n	8001f76 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f44:	4b9e      	ldr	r3, [pc, #632]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f48:	4b9d      	ldr	r3, [pc, #628]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7ff f818 	bl	8000f84 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f5a:	f7ff f813 	bl	8000f84 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1ae      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f6c:	4b94      	ldr	r3, [pc, #592]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f70:	2202      	movs	r2, #2
 8001f72:	4013      	ands	r3, r2
 8001f74:	d1f1      	bne.n	8001f5a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <HAL_RCC_OscConfig+0x44a>
 8001f80:	e0ae      	b.n	80020e0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f82:	2023      	movs	r0, #35	; 0x23
 8001f84:	183b      	adds	r3, r7, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b8d      	ldr	r3, [pc, #564]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	055b      	lsls	r3, r3, #21
 8001f92:	4013      	ands	r3, r2
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4b8a      	ldr	r3, [pc, #552]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f9a:	4b89      	ldr	r3, [pc, #548]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	0549      	lsls	r1, r1, #21
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001fa4:	183b      	adds	r3, r7, r0
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b88      	ldr	r3, [pc, #544]	; (80021cc <HAL_RCC_OscConfig+0x694>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d11a      	bne.n	8001fec <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b85      	ldr	r3, [pc, #532]	; (80021cc <HAL_RCC_OscConfig+0x694>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b84      	ldr	r3, [pc, #528]	; (80021cc <HAL_RCC_OscConfig+0x694>)
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	0049      	lsls	r1, r1, #1
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc4:	f7fe ffde 	bl	8000f84 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fce:	f7fe ffd9 	bl	8000f84 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b64      	cmp	r3, #100	; 0x64
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e174      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4b7a      	ldr	r3, [pc, #488]	; (80021cc <HAL_RCC_OscConfig+0x694>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x4d0>
 8001ff8:	4b71      	ldr	r3, [pc, #452]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ffc:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	0049      	lsls	r1, r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	651a      	str	r2, [r3, #80]	; 0x50
 8002006:	e031      	b.n	800206c <HAL_RCC_OscConfig+0x534>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10c      	bne.n	800202a <HAL_RCC_OscConfig+0x4f2>
 8002010:	4b6b      	ldr	r3, [pc, #428]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002014:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002016:	496c      	ldr	r1, [pc, #432]	; (80021c8 <HAL_RCC_OscConfig+0x690>)
 8002018:	400a      	ands	r2, r1
 800201a:	651a      	str	r2, [r3, #80]	; 0x50
 800201c:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 800201e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002020:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002022:	496b      	ldr	r1, [pc, #428]	; (80021d0 <HAL_RCC_OscConfig+0x698>)
 8002024:	400a      	ands	r2, r1
 8002026:	651a      	str	r2, [r3, #80]	; 0x50
 8002028:	e020      	b.n	800206c <HAL_RCC_OscConfig+0x534>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	23a0      	movs	r3, #160	; 0xa0
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	429a      	cmp	r2, r3
 8002034:	d10e      	bne.n	8002054 <HAL_RCC_OscConfig+0x51c>
 8002036:	4b62      	ldr	r3, [pc, #392]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203a:	4b61      	ldr	r3, [pc, #388]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	00c9      	lsls	r1, r1, #3
 8002040:	430a      	orrs	r2, r1
 8002042:	651a      	str	r2, [r3, #80]	; 0x50
 8002044:	4b5e      	ldr	r3, [pc, #376]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002048:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0049      	lsls	r1, r1, #1
 800204e:	430a      	orrs	r2, r1
 8002050:	651a      	str	r2, [r3, #80]	; 0x50
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0x534>
 8002054:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002058:	4b59      	ldr	r3, [pc, #356]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 800205a:	495b      	ldr	r1, [pc, #364]	; (80021c8 <HAL_RCC_OscConfig+0x690>)
 800205c:	400a      	ands	r2, r1
 800205e:	651a      	str	r2, [r3, #80]	; 0x50
 8002060:	4b57      	ldr	r3, [pc, #348]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002064:	4b56      	ldr	r3, [pc, #344]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002066:	495a      	ldr	r1, [pc, #360]	; (80021d0 <HAL_RCC_OscConfig+0x698>)
 8002068:	400a      	ands	r2, r1
 800206a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7fe ff86 	bl	8000f84 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800207c:	e009      	b.n	8002092 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7fe ff81 	bl	8000f84 <HAL_GetTick>
 8002082:	0002      	movs	r2, r0
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	4a52      	ldr	r2, [pc, #328]	; (80021d4 <HAL_RCC_OscConfig+0x69c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e11b      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002092:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4013      	ands	r3, r2
 800209c:	d0ef      	beq.n	800207e <HAL_RCC_OscConfig+0x546>
 800209e:	e014      	b.n	80020ca <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7fe ff70 	bl	8000f84 <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020a8:	e009      	b.n	80020be <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7fe ff6b 	bl	8000f84 <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	4a47      	ldr	r2, [pc, #284]	; (80021d4 <HAL_RCC_OscConfig+0x69c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e105      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020be:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 80020c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d1ef      	bne.n	80020aa <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020ca:	2323      	movs	r3, #35	; 0x23
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 80020d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 80020da:	493f      	ldr	r1, [pc, #252]	; (80021d8 <HAL_RCC_OscConfig+0x6a0>)
 80020dc:	400a      	ands	r2, r1
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2220      	movs	r2, #32
 80020e6:	4013      	ands	r3, r2
 80020e8:	d049      	beq.n	800217e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d026      	beq.n	8002140 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002102:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	635a      	str	r2, [r3, #52]	; 0x34
 800210a:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_RCC_OscConfig+0x6a4>)
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	4b33      	ldr	r3, [pc, #204]	; (80021dc <HAL_RCC_OscConfig+0x6a4>)
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	0189      	lsls	r1, r1, #6
 8002114:	430a      	orrs	r2, r1
 8002116:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe ff34 	bl	8000f84 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002122:	f7fe ff2f 	bl	8000f84 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e0ca      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d0f1      	beq.n	8002122 <HAL_RCC_OscConfig+0x5ea>
 800213e:	e01e      	b.n	800217e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002146:	2101      	movs	r1, #1
 8002148:	438a      	bics	r2, r1
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	4b23      	ldr	r3, [pc, #140]	; (80021dc <HAL_RCC_OscConfig+0x6a4>)
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <HAL_RCC_OscConfig+0x6a4>)
 8002152:	4923      	ldr	r1, [pc, #140]	; (80021e0 <HAL_RCC_OscConfig+0x6a8>)
 8002154:	400a      	ands	r2, r1
 8002156:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7fe ff14 	bl	8000f84 <HAL_GetTick>
 800215c:	0003      	movs	r3, r0
 800215e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002162:	f7fe ff0f 	bl	8000f84 <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0aa      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2202      	movs	r2, #2
 800217a:	4013      	ands	r3, r2
 800217c:	d1f1      	bne.n	8002162 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d100      	bne.n	8002188 <HAL_RCC_OscConfig+0x650>
 8002186:	e09f      	b.n	80022c8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d100      	bne.n	8002190 <HAL_RCC_OscConfig+0x658>
 800218e:	e078      	b.n	8002282 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	2b02      	cmp	r3, #2
 8002196:	d159      	bne.n	800224c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_RCC_OscConfig+0x688>)
 800219e:	4911      	ldr	r1, [pc, #68]	; (80021e4 <HAL_RCC_OscConfig+0x6ac>)
 80021a0:	400a      	ands	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe feee 	bl	8000f84 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021ac:	e01c      	b.n	80021e8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ae:	f7fe fee9 	bl	8000f84 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d915      	bls.n	80021e8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e084      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
 80021c0:	40021000 	.word	0x40021000
 80021c4:	ffff1fff 	.word	0xffff1fff
 80021c8:	fffffeff 	.word	0xfffffeff
 80021cc:	40007000 	.word	0x40007000
 80021d0:	fffffbff 	.word	0xfffffbff
 80021d4:	00001388 	.word	0x00001388
 80021d8:	efffffff 	.word	0xefffffff
 80021dc:	40010000 	.word	0x40010000
 80021e0:	ffffdfff 	.word	0xffffdfff
 80021e4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021e8:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <HAL_RCC_OscConfig+0x79c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	049b      	lsls	r3, r3, #18
 80021f0:	4013      	ands	r3, r2
 80021f2:	d1dc      	bne.n	80021ae <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f4:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <HAL_RCC_OscConfig+0x79c>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a37      	ldr	r2, [pc, #220]	; (80022d8 <HAL_RCC_OscConfig+0x7a0>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	431a      	orrs	r2, r3
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCC_OscConfig+0x79c>)
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_RCC_OscConfig+0x79c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_RCC_OscConfig+0x79c>)
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0449      	lsls	r1, r1, #17
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe feaf 	bl	8000f84 <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe feaa 	bl	8000f84 <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e045      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800223e:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <HAL_RCC_OscConfig+0x79c>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	049b      	lsls	r3, r3, #18
 8002246:	4013      	ands	r3, r2
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x6f4>
 800224a:	e03d      	b.n	80022c8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_RCC_OscConfig+0x79c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCC_OscConfig+0x79c>)
 8002252:	4922      	ldr	r1, [pc, #136]	; (80022dc <HAL_RCC_OscConfig+0x7a4>)
 8002254:	400a      	ands	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fe94 	bl	8000f84 <HAL_GetTick>
 800225c:	0003      	movs	r3, r0
 800225e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fe8f 	bl	8000f84 <HAL_GetTick>
 8002266:	0002      	movs	r2, r0
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e02a      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_RCC_OscConfig+0x79c>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	049b      	lsls	r3, r3, #18
 800227c:	4013      	ands	r3, r2
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x72a>
 8002280:	e022      	b.n	80022c8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e01d      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_RCC_OscConfig+0x79c>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d10f      	bne.n	80022c4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	23f0      	movs	r3, #240	; 0xf0
 80022a8:	039b      	lsls	r3, r3, #14
 80022aa:	401a      	ands	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	23c0      	movs	r3, #192	; 0xc0
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	401a      	ands	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b00a      	add	sp, #40	; 0x28
 80022d0:	bdb0      	pop	{r4, r5, r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	40021000 	.word	0x40021000
 80022d8:	ff02ffff 	.word	0xff02ffff
 80022dc:	feffffff 	.word	0xfeffffff

080022e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b5b0      	push	{r4, r5, r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e128      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b96      	ldr	r3, [pc, #600]	; (8002550 <HAL_RCC_ClockConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2201      	movs	r2, #1
 80022fa:	4013      	ands	r3, r2
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d91e      	bls.n	8002340 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b93      	ldr	r3, [pc, #588]	; (8002550 <HAL_RCC_ClockConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	4b90      	ldr	r3, [pc, #576]	; (8002550 <HAL_RCC_ClockConfig+0x270>)
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002314:	f7fe fe36 	bl	8000f84 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231c:	e009      	b.n	8002332 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231e:	f7fe fe31 	bl	8000f84 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	4a8a      	ldr	r2, [pc, #552]	; (8002554 <HAL_RCC_ClockConfig+0x274>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e109      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b87      	ldr	r3, [pc, #540]	; (8002550 <HAL_RCC_ClockConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2201      	movs	r2, #1
 8002338:	4013      	ands	r3, r2
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2202      	movs	r2, #2
 8002346:	4013      	ands	r3, r2
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234a:	4b83      	ldr	r3, [pc, #524]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	22f0      	movs	r2, #240	; 0xf0
 8002350:	4393      	bics	r3, r2
 8002352:	0019      	movs	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 800235a:	430a      	orrs	r2, r1
 800235c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	4013      	ands	r3, r2
 8002366:	d100      	bne.n	800236a <HAL_RCC_ClockConfig+0x8a>
 8002368:	e089      	b.n	800247e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002372:	4b79      	ldr	r3, [pc, #484]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	029b      	lsls	r3, r3, #10
 800237a:	4013      	ands	r3, r2
 800237c:	d120      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0e1      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800238a:	4b73      	ldr	r3, [pc, #460]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	049b      	lsls	r3, r3, #18
 8002392:	4013      	ands	r3, r2
 8002394:	d114      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e0d5      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2204      	movs	r2, #4
 80023a8:	4013      	ands	r3, r2
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0ca      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023b0:	4b69      	ldr	r3, [pc, #420]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4013      	ands	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0c2      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c0:	4b65      	ldr	r3, [pc, #404]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2203      	movs	r2, #3
 80023c6:	4393      	bics	r3, r2
 80023c8:	0019      	movs	r1, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4b62      	ldr	r3, [pc, #392]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 80023d0:	430a      	orrs	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d4:	f7fe fdd6 	bl	8000f84 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d111      	bne.n	8002408 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e4:	e009      	b.n	80023fa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e6:	f7fe fdcd 	bl	8000f84 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	4a58      	ldr	r2, [pc, #352]	; (8002554 <HAL_RCC_ClockConfig+0x274>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0a5      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	220c      	movs	r2, #12
 8002400:	4013      	ands	r3, r2
 8002402:	2b08      	cmp	r3, #8
 8002404:	d1ef      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x106>
 8002406:	e03a      	b.n	800247e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d111      	bne.n	8002434 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002410:	e009      	b.n	8002426 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002412:	f7fe fdb7 	bl	8000f84 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	4a4d      	ldr	r2, [pc, #308]	; (8002554 <HAL_RCC_ClockConfig+0x274>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e08f      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002426:	4b4c      	ldr	r3, [pc, #304]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	220c      	movs	r2, #12
 800242c:	4013      	ands	r3, r2
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d1ef      	bne.n	8002412 <HAL_RCC_ClockConfig+0x132>
 8002432:	e024      	b.n	800247e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d11b      	bne.n	8002474 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800243c:	e009      	b.n	8002452 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243e:	f7fe fda1 	bl	8000f84 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	4a42      	ldr	r2, [pc, #264]	; (8002554 <HAL_RCC_ClockConfig+0x274>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e079      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	220c      	movs	r2, #12
 8002458:	4013      	ands	r3, r2
 800245a:	2b04      	cmp	r3, #4
 800245c:	d1ef      	bne.n	800243e <HAL_RCC_ClockConfig+0x15e>
 800245e:	e00e      	b.n	800247e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7fe fd90 	bl	8000f84 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <HAL_RCC_ClockConfig+0x274>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e068      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002474:	4b38      	ldr	r3, [pc, #224]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	220c      	movs	r2, #12
 800247a:	4013      	ands	r3, r2
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_ClockConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2201      	movs	r2, #1
 8002484:	4013      	ands	r3, r2
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d21e      	bcs.n	80024ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248c:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_ClockConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4393      	bics	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_RCC_ClockConfig+0x270>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800249e:	f7fe fd71 	bl	8000f84 <HAL_GetTick>
 80024a2:	0003      	movs	r3, r0
 80024a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	e009      	b.n	80024bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7fe fd6c 	bl	8000f84 <HAL_GetTick>
 80024ac:	0002      	movs	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	4a28      	ldr	r2, [pc, #160]	; (8002554 <HAL_RCC_ClockConfig+0x274>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e044      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_ClockConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	4013      	ands	r3, r2
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d1ee      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2204      	movs	r2, #4
 80024d0:	4013      	ands	r3, r2
 80024d2:	d009      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d4:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a20      	ldr	r2, [pc, #128]	; (800255c <HAL_RCC_ClockConfig+0x27c>)
 80024da:	4013      	ands	r3, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 80024e4:	430a      	orrs	r2, r1
 80024e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2208      	movs	r2, #8
 80024ee:	4013      	ands	r3, r2
 80024f0:	d00a      	beq.n	8002508 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <HAL_RCC_ClockConfig+0x280>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	00da      	lsls	r2, r3, #3
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 8002504:	430a      	orrs	r2, r1
 8002506:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002508:	f000 f832 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 800250c:	0001      	movs	r1, r0
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_RCC_ClockConfig+0x278>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	220f      	movs	r2, #15
 8002516:	4013      	ands	r3, r2
 8002518:	4a12      	ldr	r2, [pc, #72]	; (8002564 <HAL_RCC_ClockConfig+0x284>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	000a      	movs	r2, r1
 800251e:	40da      	lsrs	r2, r3
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_RCC_ClockConfig+0x288>)
 8002522:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_ClockConfig+0x28c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	250b      	movs	r5, #11
 800252a:	197c      	adds	r4, r7, r5
 800252c:	0018      	movs	r0, r3
 800252e:	f7fe fce3 	bl	8000ef8 <HAL_InitTick>
 8002532:	0003      	movs	r3, r0
 8002534:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002536:	197b      	adds	r3, r7, r5
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800253e:	197b      	adds	r3, r7, r5
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	e000      	b.n	8002546 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b004      	add	sp, #16
 800254c:	bdb0      	pop	{r4, r5, r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	40022000 	.word	0x40022000
 8002554:	00001388 	.word	0x00001388
 8002558:	40021000 	.word	0x40021000
 800255c:	fffff8ff 	.word	0xfffff8ff
 8002560:	ffffc7ff 	.word	0xffffc7ff
 8002564:	08003860 	.word	0x08003860
 8002568:	20000000 	.word	0x20000000
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002576:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800257c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800257e:	230c      	movs	r3, #12
 8002580:	4013      	ands	r3, r2
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d014      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002586:	d900      	bls.n	800258a <HAL_RCC_GetSysClockFreq+0x1a>
 8002588:	e07b      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x112>
 800258a:	2b04      	cmp	r3, #4
 800258c:	d002      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x24>
 800258e:	2b08      	cmp	r3, #8
 8002590:	d00b      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x3a>
 8002592:	e076      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002594:	4b44      	ldr	r3, [pc, #272]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2210      	movs	r2, #16
 800259a:	4013      	ands	r3, r2
 800259c:	d002      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800259e:	4b43      	ldr	r3, [pc, #268]	; (80026ac <HAL_RCC_GetSysClockFreq+0x13c>)
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025a2:	e07c      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80025a4:	4b42      	ldr	r3, [pc, #264]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x140>)
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025a8:	e079      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025aa:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025ae:	e076      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b2:	0c9a      	lsrs	r2, r3, #18
 80025b4:	230f      	movs	r3, #15
 80025b6:	401a      	ands	r2, r3
 80025b8:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x148>)
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	0d9a      	lsrs	r2, r3, #22
 80025c2:	2303      	movs	r3, #3
 80025c4:	4013      	ands	r3, r2
 80025c6:	3301      	adds	r3, #1
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ca:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x138>)
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	025b      	lsls	r3, r3, #9
 80025d2:	4013      	ands	r3, r2
 80025d4:	d01a      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	4a35      	ldr	r2, [pc, #212]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80025e0:	2300      	movs	r3, #0
 80025e2:	69b8      	ldr	r0, [r7, #24]
 80025e4:	69f9      	ldr	r1, [r7, #28]
 80025e6:	f7fd fe3b 	bl	8000260 <__aeabi_lmul>
 80025ea:	0002      	movs	r2, r0
 80025ec:	000b      	movs	r3, r1
 80025ee:	0010      	movs	r0, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f7fd fe0f 	bl	8000220 <__aeabi_uldivmod>
 8002602:	0002      	movs	r2, r0
 8002604:	000b      	movs	r3, r1
 8002606:	0013      	movs	r3, r2
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
 800260a:	e037      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800260c:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2210      	movs	r2, #16
 8002612:	4013      	ands	r3, r2
 8002614:	d01a      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002620:	2300      	movs	r3, #0
 8002622:	68b8      	ldr	r0, [r7, #8]
 8002624:	68f9      	ldr	r1, [r7, #12]
 8002626:	f7fd fe1b 	bl	8000260 <__aeabi_lmul>
 800262a:	0002      	movs	r2, r0
 800262c:	000b      	movs	r3, r1
 800262e:	0010      	movs	r0, r2
 8002630:	0019      	movs	r1, r3
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f7fd fdef 	bl	8000220 <__aeabi_uldivmod>
 8002642:	0002      	movs	r2, r0
 8002644:	000b      	movs	r3, r1
 8002646:	0013      	movs	r3, r2
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
 800264a:	e017      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	0018      	movs	r0, r3
 8002650:	2300      	movs	r3, #0
 8002652:	0019      	movs	r1, r3
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002656:	2300      	movs	r3, #0
 8002658:	f7fd fe02 	bl	8000260 <__aeabi_lmul>
 800265c:	0002      	movs	r2, r0
 800265e:	000b      	movs	r3, r1
 8002660:	0010      	movs	r0, r2
 8002662:	0019      	movs	r1, r3
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	001c      	movs	r4, r3
 8002668:	2300      	movs	r3, #0
 800266a:	001d      	movs	r5, r3
 800266c:	0022      	movs	r2, r4
 800266e:	002b      	movs	r3, r5
 8002670:	f7fd fdd6 	bl	8000220 <__aeabi_uldivmod>
 8002674:	0002      	movs	r2, r0
 8002676:	000b      	movs	r3, r1
 8002678:	0013      	movs	r3, r2
 800267a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800267c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002680:	e00d      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	0b5b      	lsrs	r3, r3, #13
 8002688:	2207      	movs	r2, #7
 800268a:	4013      	ands	r3, r2
 800268c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	3301      	adds	r3, #1
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	0212      	lsls	r2, r2, #8
 8002696:	409a      	lsls	r2, r3
 8002698:	0013      	movs	r3, r2
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800269c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b00e      	add	sp, #56	; 0x38
 80026a6:	bdb0      	pop	{r4, r5, r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	003d0900 	.word	0x003d0900
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	007a1200 	.word	0x007a1200
 80026b8:	08003878 	.word	0x08003878

080026bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_RCC_GetHCLKFreq+0x10>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	20000000 	.word	0x20000000

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff2 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 80026d8:	0001      	movs	r1, r0
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	2207      	movs	r2, #7
 80026e2:	4013      	ands	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	40d9      	lsrs	r1, r3
 80026ea:	000b      	movs	r3, r1
}
 80026ec:	0018      	movs	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08003870 	.word	0x08003870

080026fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002700:	f7ff ffdc 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 8002704:	0001      	movs	r1, r0
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	0adb      	lsrs	r3, r3, #11
 800270c:	2207      	movs	r2, #7
 800270e:	4013      	ands	r3, r2
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002712:	5cd3      	ldrb	r3, [r2, r3]
 8002714:	40d9      	lsrs	r1, r3
 8002716:	000b      	movs	r3, r1
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	40021000 	.word	0x40021000
 8002724:	08003870 	.word	0x08003870

08002728 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002730:	2317      	movs	r3, #23
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	4013      	ands	r3, r2
 8002740:	d106      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4013      	ands	r3, r2
 800274c:	d100      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800274e:	e0d9      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002750:	4ba4      	ldr	r3, [pc, #656]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	055b      	lsls	r3, r3, #21
 8002758:	4013      	ands	r3, r2
 800275a:	d10a      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	4ba1      	ldr	r3, [pc, #644]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800275e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002760:	4ba0      	ldr	r3, [pc, #640]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002762:	2180      	movs	r1, #128	; 0x80
 8002764:	0549      	lsls	r1, r1, #21
 8002766:	430a      	orrs	r2, r1
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800276a:	2317      	movs	r3, #23
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002772:	4b9d      	ldr	r3, [pc, #628]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4013      	ands	r3, r2
 800277c:	d11a      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277e:	4b9a      	ldr	r3, [pc, #616]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b99      	ldr	r3, [pc, #612]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	0049      	lsls	r1, r1, #1
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278c:	f7fe fbfa 	bl	8000f84 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	e008      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7fe fbf5 	bl	8000f84 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b64      	cmp	r3, #100	; 0x64
 80027a2:	d901      	bls.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e118      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b8f      	ldr	r3, [pc, #572]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4013      	ands	r3, r2
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80027b4:	4b8b      	ldr	r3, [pc, #556]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	23c0      	movs	r3, #192	; 0xc0
 80027ba:	039b      	lsls	r3, r3, #14
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	23c0      	movs	r3, #192	; 0xc0
 80027c6:	039b      	lsls	r3, r3, #14
 80027c8:	4013      	ands	r3, r2
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	23c0      	movs	r3, #192	; 0xc0
 80027d6:	039b      	lsls	r3, r3, #14
 80027d8:	4013      	ands	r3, r2
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d013      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	23c0      	movs	r3, #192	; 0xc0
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	401a      	ands	r2, r3
 80027ea:	23c0      	movs	r3, #192	; 0xc0
 80027ec:	029b      	lsls	r3, r3, #10
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d10a      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80027f2:	4b7c      	ldr	r3, [pc, #496]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	029b      	lsls	r3, r3, #10
 80027fa:	401a      	ands	r2, r3
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	029b      	lsls	r3, r3, #10
 8002800:	429a      	cmp	r2, r3
 8002802:	d101      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0e8      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002808:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800280a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800280c:	23c0      	movs	r3, #192	; 0xc0
 800280e:	029b      	lsls	r3, r3, #10
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d049      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x186>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	23c0      	movs	r3, #192	; 0xc0
 8002820:	029b      	lsls	r3, r3, #10
 8002822:	4013      	ands	r3, r2
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	429a      	cmp	r2, r3
 8002828:	d004      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2220      	movs	r2, #32
 8002830:	4013      	ands	r3, r2
 8002832:	d10d      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	23c0      	movs	r3, #192	; 0xc0
 800283a:	029b      	lsls	r3, r3, #10
 800283c:	4013      	ands	r3, r2
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d034      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	4013      	ands	r3, r2
 800284e:	d02e      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002850:	4b64      	ldr	r3, [pc, #400]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002854:	4a65      	ldr	r2, [pc, #404]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002856:	4013      	ands	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800285a:	4b62      	ldr	r3, [pc, #392]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800285c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800285e:	4b61      	ldr	r3, [pc, #388]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	0309      	lsls	r1, r1, #12
 8002864:	430a      	orrs	r2, r1
 8002866:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002868:	4b5e      	ldr	r3, [pc, #376]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800286a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800286c:	4b5d      	ldr	r3, [pc, #372]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800286e:	4960      	ldr	r1, [pc, #384]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002870:	400a      	ands	r2, r1
 8002872:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002874:	4b5b      	ldr	r3, [pc, #364]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4013      	ands	r3, r2
 8002882:	d014      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fb7e 	bl	8000f84 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800288c:	e009      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fb79 	bl	8000f84 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	4a56      	ldr	r2, [pc, #344]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e09b      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028a2:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d0ef      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	23c0      	movs	r3, #192	; 0xc0
 80028b4:	029b      	lsls	r3, r3, #10
 80028b6:	401a      	ands	r2, r3
 80028b8:	23c0      	movs	r3, #192	; 0xc0
 80028ba:	029b      	lsls	r3, r3, #10
 80028bc:	429a      	cmp	r2, r3
 80028be:	d10c      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80028c0:	4b48      	ldr	r3, [pc, #288]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a4c      	ldr	r2, [pc, #304]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	23c0      	movs	r3, #192	; 0xc0
 80028d0:	039b      	lsls	r3, r3, #14
 80028d2:	401a      	ands	r2, r3
 80028d4:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	4b42      	ldr	r3, [pc, #264]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	23c0      	movs	r3, #192	; 0xc0
 80028e4:	029b      	lsls	r3, r3, #10
 80028e6:	401a      	ands	r2, r3
 80028e8:	4b3e      	ldr	r3, [pc, #248]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ee:	2317      	movs	r3, #23
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028fc:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028fe:	493f      	ldr	r1, [pc, #252]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002900:	400a      	ands	r2, r1
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2201      	movs	r2, #1
 800290a:	4013      	ands	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800290e:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	2203      	movs	r2, #3
 8002914:	4393      	bics	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800291e:	430a      	orrs	r2, r1
 8002920:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2202      	movs	r2, #2
 8002928:	4013      	ands	r3, r2
 800292a:	d009      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800292c:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002930:	220c      	movs	r2, #12
 8002932:	4393      	bics	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800293c:	430a      	orrs	r2, r1
 800293e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2204      	movs	r2, #4
 8002946:	4013      	ands	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800294a:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800295a:	430a      	orrs	r2, r1
 800295c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2208      	movs	r2, #8
 8002964:	4013      	ands	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002968:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002978:	430a      	orrs	r2, r1
 800297a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4013      	ands	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800298a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298c:	4a17      	ldr	r2, [pc, #92]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800298e:	4013      	ands	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002998:	430a      	orrs	r2, r1
 800299a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	4013      	ands	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029b6:	430a      	orrs	r2, r1
 80029b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	4013      	ands	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80029c4:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1a      	ldr	r2, [r3, #32]
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029d4:	430a      	orrs	r2, r1
 80029d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b006      	add	sp, #24
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40007000 	.word	0x40007000
 80029ec:	fffcffff 	.word	0xfffcffff
 80029f0:	fff7ffff 	.word	0xfff7ffff
 80029f4:	00001388 	.word	0x00001388
 80029f8:	ffcfffff 	.word	0xffcfffff
 80029fc:	efffffff 	.word	0xefffffff
 8002a00:	fffff3ff 	.word	0xfffff3ff
 8002a04:	ffffcfff 	.word	0xffffcfff
 8002a08:	fbffffff 	.word	0xfbffffff
 8002a0c:	fff3ffff 	.word	0xfff3ffff

08002a10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e08e      	b.n	8002b40 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2221      	movs	r2, #33	; 0x21
 8002a26:	5c9b      	ldrb	r3, [r3, r2]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	2100      	movs	r1, #0
 8002a34:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7fe f8df 	bl	8000bfc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2221      	movs	r2, #33	; 0x21
 8002a42:	2102      	movs	r1, #2
 8002a44:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	22ca      	movs	r2, #202	; 0xca
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2253      	movs	r2, #83	; 0x53
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f000 f89e 	bl	8002b9a <RTC_EnterInitMode>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	22ff      	movs	r2, #255	; 0xff
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2221      	movs	r2, #33	; 0x21
 8002a6e:	2104      	movs	r1, #4
 8002a70:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e064      	b.n	8002b40 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4931      	ldr	r1, [pc, #196]	; (8002b48 <HAL_RTC_Init+0x138>)
 8002a82:	400a      	ands	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68d2      	ldr	r2, [r2, #12]
 8002aac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6919      	ldr	r1, [r3, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	438a      	bics	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2103      	movs	r1, #3
 8002ade:	438a      	bics	r2, r1
 8002ae0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2220      	movs	r2, #32
 8002b02:	4013      	ands	r3, r2
 8002b04:	d113      	bne.n	8002b2e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 f81f 	bl	8002b4c <HAL_RTC_WaitForSynchro>
 8002b0e:	1e03      	subs	r3, r0, #0
 8002b10:	d00d      	beq.n	8002b2e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	22ff      	movs	r2, #255	; 0xff
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2221      	movs	r2, #33	; 0x21
 8002b1e:	2104      	movs	r1, #4
 8002b20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	2100      	movs	r1, #0
 8002b28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e008      	b.n	8002b40 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	22ff      	movs	r2, #255	; 0xff
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2221      	movs	r2, #33	; 0x21
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
  }
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	ff8fffbf 	.word	0xff8fffbf

08002b4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	21a0      	movs	r1, #160	; 0xa0
 8002b60:	438a      	bics	r2, r1
 8002b62:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002b64:	f7fe fa0e 	bl	8000f84 <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b6e:	f7fe fa09 	bl	8000f84 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad2      	subs	r2, r2, r3
 8002b78:	23fa      	movs	r3, #250	; 0xfa
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d901      	bls.n	8002b84 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e006      	b.n	8002b92 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d0ee      	beq.n	8002b6e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b004      	add	sp, #16
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2240      	movs	r2, #64	; 0x40
 8002baa:	4013      	ands	r3, r2
 8002bac:	d11a      	bne.n	8002be4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4252      	negs	r2, r2
 8002bb6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002bb8:	f7fe f9e4 	bl	8000f84 <HAL_GetTick>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002bc0:	e00a      	b.n	8002bd8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002bc2:	f7fe f9df 	bl	8000f84 <HAL_GetTick>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1ad2      	subs	r2, r2, r3
 8002bcc:	23fa      	movs	r3, #250	; 0xfa
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d901      	bls.n	8002bd8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e006      	b.n	8002be6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	4013      	ands	r3, r2
 8002be2:	d0ee      	beq.n	8002bc2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	0018      	movs	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b004      	add	sp, #16
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	5c9b      	ldrb	r3, [r3, r2]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e08c      	b.n	8002d24 <HAL_RTCEx_SetWakeUpTimer+0x134>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2221      	movs	r2, #33	; 0x21
 8002c16:	2102      	movs	r1, #2
 8002c18:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	22ca      	movs	r2, #202	; 0xca
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2253      	movs	r2, #83	; 0x53
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4013      	ands	r3, r2
 8002c36:	d021      	beq.n	8002c7c <HAL_RTCEx_SetWakeUpTimer+0x8c>
  {
    tickstart = HAL_GetTick();
 8002c38:	f7fe f9a4 	bl	8000f84 <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002c40:	e016      	b.n	8002c70 <HAL_RTCEx_SetWakeUpTimer+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c42:	f7fe f99f 	bl	8000f84 <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	23fa      	movs	r3, #250	; 0xfa
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d90d      	bls.n	8002c70 <HAL_RTCEx_SetWakeUpTimer+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	22ff      	movs	r2, #255	; 0xff
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2221      	movs	r2, #33	; 0x21
 8002c60:	2103      	movs	r1, #3
 8002c62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	2100      	movs	r1, #0
 8002c6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e059      	b.n	8002d24 <HAL_RTCEx_SetWakeUpTimer+0x134>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2204      	movs	r2, #4
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d1e2      	bne.n	8002c42 <HAL_RTCEx_SetWakeUpTimer+0x52>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4929      	ldr	r1, [pc, #164]	; (8002d2c <HAL_RTCEx_SetWakeUpTimer+0x13c>)
 8002c88:	400a      	ands	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8002c8c:	f7fe f97a 	bl	8000f84 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002c94:	e016      	b.n	8002cc4 <HAL_RTCEx_SetWakeUpTimer+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c96:	f7fe f975 	bl	8000f84 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	23fa      	movs	r3, #250	; 0xfa
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d90d      	bls.n	8002cc4 <HAL_RTCEx_SetWakeUpTimer+0xd4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2221      	movs	r2, #33	; 0x21
 8002cb4:	2103      	movs	r1, #3
 8002cb6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e02f      	b.n	8002d24 <HAL_RTCEx_SetWakeUpTimer+0x134>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d0e2      	beq.n	8002c96 <HAL_RTCEx_SetWakeUpTimer+0xa6>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2107      	movs	r1, #7
 8002cdc:	438a      	bics	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	00c9      	lsls	r1, r1, #3
 8002d06:	430a      	orrs	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	22ff      	movs	r2, #255	; 0xff
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2221      	movs	r2, #33	; 0x21
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b006      	add	sp, #24
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	fffffbff 	.word	0xfffffbff

08002d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e044      	b.n	8002dcc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d107      	bne.n	8002d5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2274      	movs	r2, #116	; 0x74
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fd ff69 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2224      	movs	r2, #36	; 0x24
 8002d5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 f8d8 	bl	8002f28 <UART_SetConfig>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e024      	b.n	8002dcc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 fb6b 	bl	8003468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	490d      	ldr	r1, [pc, #52]	; (8002dd4 <HAL_UART_Init+0xa4>)
 8002d9e:	400a      	ands	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	212a      	movs	r1, #42	; 0x2a
 8002dae:	438a      	bics	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 fc03 	bl	80035d0 <UART_CheckIdleState>
 8002dca:	0003      	movs	r3, r0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	ffffb7ff 	.word	0xffffb7ff

08002dd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	1dbb      	adds	r3, r7, #6
 8002de6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d000      	beq.n	8002df2 <HAL_UART_Transmit+0x1a>
 8002df0:	e095      	b.n	8002f1e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_UART_Transmit+0x28>
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e08d      	b.n	8002f20 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	015b      	lsls	r3, r3, #5
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d109      	bne.n	8002e24 <HAL_UART_Transmit+0x4c>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d001      	beq.n	8002e24 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e07d      	b.n	8002f20 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2274      	movs	r2, #116	; 0x74
 8002e28:	5c9b      	ldrb	r3, [r3, r2]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Transmit+0x5a>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e076      	b.n	8002f20 <HAL_UART_Transmit+0x148>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2274      	movs	r2, #116	; 0x74
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2221      	movs	r2, #33	; 0x21
 8002e46:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e48:	f7fe f89c 	bl	8000f84 <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1dba      	adds	r2, r7, #6
 8002e54:	2150      	movs	r1, #80	; 0x50
 8002e56:	8812      	ldrh	r2, [r2, #0]
 8002e58:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1dba      	adds	r2, r7, #6
 8002e5e:	2152      	movs	r1, #82	; 0x52
 8002e60:	8812      	ldrh	r2, [r2, #0]
 8002e62:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	015b      	lsls	r3, r3, #5
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d108      	bne.n	8002e82 <HAL_UART_Transmit+0xaa>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d104      	bne.n	8002e82 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	e003      	b.n	8002e8a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2274      	movs	r2, #116	; 0x74
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002e92:	e02c      	b.n	8002eee <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	0013      	movs	r3, r2
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	f000 fbdd 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e038      	b.n	8002f20 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	001a      	movs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	05d2      	lsls	r2, r2, #23
 8002ec0:	0dd2      	lsrs	r2, r2, #23
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	e007      	b.n	8002edc <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2252      	movs	r2, #82	; 0x52
 8002ee0:	5a9b      	ldrh	r3, [r3, r2]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b299      	uxth	r1, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2252      	movs	r2, #82	; 0x52
 8002eec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2252      	movs	r2, #82	; 0x52
 8002ef2:	5a9b      	ldrh	r3, [r3, r2]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1cc      	bne.n	8002e94 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	0013      	movs	r3, r2
 8002f04:	2200      	movs	r2, #0
 8002f06:	2140      	movs	r1, #64	; 0x40
 8002f08:	f000 fbaa 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e005      	b.n	8002f20 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
  }
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b008      	add	sp, #32
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f28:	b5b0      	push	{r4, r5, r7, lr}
 8002f2a:	b08e      	sub	sp, #56	; 0x38
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f30:	231a      	movs	r3, #26
 8002f32:	2218      	movs	r2, #24
 8002f34:	189b      	adds	r3, r3, r2
 8002f36:	19db      	adds	r3, r3, r7
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4ac3      	ldr	r2, [pc, #780]	; (8003268 <UART_SetConfig+0x340>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f66:	430a      	orrs	r2, r1
 8002f68:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4abe      	ldr	r2, [pc, #760]	; (800326c <UART_SetConfig+0x344>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4ab8      	ldr	r2, [pc, #736]	; (8003270 <UART_SetConfig+0x348>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4ab4      	ldr	r2, [pc, #720]	; (8003274 <UART_SetConfig+0x34c>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4ab0      	ldr	r2, [pc, #704]	; (8003278 <UART_SetConfig+0x350>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d131      	bne.n	8003020 <UART_SetConfig+0xf8>
 8002fbc:	4baf      	ldr	r3, [pc, #700]	; (800327c <UART_SetConfig+0x354>)
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d01d      	beq.n	8003004 <UART_SetConfig+0xdc>
 8002fc8:	d823      	bhi.n	8003012 <UART_SetConfig+0xea>
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d00c      	beq.n	8002fe8 <UART_SetConfig+0xc0>
 8002fce:	d820      	bhi.n	8003012 <UART_SetConfig+0xea>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <UART_SetConfig+0xb2>
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d00e      	beq.n	8002ff6 <UART_SetConfig+0xce>
 8002fd8:	e01b      	b.n	8003012 <UART_SetConfig+0xea>
 8002fda:	231b      	movs	r3, #27
 8002fdc:	2218      	movs	r2, #24
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	19db      	adds	r3, r3, r7
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e0b4      	b.n	8003152 <UART_SetConfig+0x22a>
 8002fe8:	231b      	movs	r3, #27
 8002fea:	2218      	movs	r2, #24
 8002fec:	189b      	adds	r3, r3, r2
 8002fee:	19db      	adds	r3, r3, r7
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e0ad      	b.n	8003152 <UART_SetConfig+0x22a>
 8002ff6:	231b      	movs	r3, #27
 8002ff8:	2218      	movs	r2, #24
 8002ffa:	189b      	adds	r3, r3, r2
 8002ffc:	19db      	adds	r3, r3, r7
 8002ffe:	2204      	movs	r2, #4
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e0a6      	b.n	8003152 <UART_SetConfig+0x22a>
 8003004:	231b      	movs	r3, #27
 8003006:	2218      	movs	r2, #24
 8003008:	189b      	adds	r3, r3, r2
 800300a:	19db      	adds	r3, r3, r7
 800300c:	2208      	movs	r2, #8
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e09f      	b.n	8003152 <UART_SetConfig+0x22a>
 8003012:	231b      	movs	r3, #27
 8003014:	2218      	movs	r2, #24
 8003016:	189b      	adds	r3, r3, r2
 8003018:	19db      	adds	r3, r3, r7
 800301a:	2210      	movs	r2, #16
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	e098      	b.n	8003152 <UART_SetConfig+0x22a>
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a96      	ldr	r2, [pc, #600]	; (8003280 <UART_SetConfig+0x358>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d131      	bne.n	800308e <UART_SetConfig+0x166>
 800302a:	4b94      	ldr	r3, [pc, #592]	; (800327c <UART_SetConfig+0x354>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	220c      	movs	r2, #12
 8003030:	4013      	ands	r3, r2
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d01d      	beq.n	8003072 <UART_SetConfig+0x14a>
 8003036:	d823      	bhi.n	8003080 <UART_SetConfig+0x158>
 8003038:	2b08      	cmp	r3, #8
 800303a:	d00c      	beq.n	8003056 <UART_SetConfig+0x12e>
 800303c:	d820      	bhi.n	8003080 <UART_SetConfig+0x158>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <UART_SetConfig+0x120>
 8003042:	2b04      	cmp	r3, #4
 8003044:	d00e      	beq.n	8003064 <UART_SetConfig+0x13c>
 8003046:	e01b      	b.n	8003080 <UART_SetConfig+0x158>
 8003048:	231b      	movs	r3, #27
 800304a:	2218      	movs	r2, #24
 800304c:	189b      	adds	r3, r3, r2
 800304e:	19db      	adds	r3, r3, r7
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	e07d      	b.n	8003152 <UART_SetConfig+0x22a>
 8003056:	231b      	movs	r3, #27
 8003058:	2218      	movs	r2, #24
 800305a:	189b      	adds	r3, r3, r2
 800305c:	19db      	adds	r3, r3, r7
 800305e:	2202      	movs	r2, #2
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e076      	b.n	8003152 <UART_SetConfig+0x22a>
 8003064:	231b      	movs	r3, #27
 8003066:	2218      	movs	r2, #24
 8003068:	189b      	adds	r3, r3, r2
 800306a:	19db      	adds	r3, r3, r7
 800306c:	2204      	movs	r2, #4
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e06f      	b.n	8003152 <UART_SetConfig+0x22a>
 8003072:	231b      	movs	r3, #27
 8003074:	2218      	movs	r2, #24
 8003076:	189b      	adds	r3, r3, r2
 8003078:	19db      	adds	r3, r3, r7
 800307a:	2208      	movs	r2, #8
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e068      	b.n	8003152 <UART_SetConfig+0x22a>
 8003080:	231b      	movs	r3, #27
 8003082:	2218      	movs	r2, #24
 8003084:	189b      	adds	r3, r3, r2
 8003086:	19db      	adds	r3, r3, r7
 8003088:	2210      	movs	r2, #16
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e061      	b.n	8003152 <UART_SetConfig+0x22a>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a7c      	ldr	r2, [pc, #496]	; (8003284 <UART_SetConfig+0x35c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d106      	bne.n	80030a6 <UART_SetConfig+0x17e>
 8003098:	231b      	movs	r3, #27
 800309a:	2218      	movs	r2, #24
 800309c:	189b      	adds	r3, r3, r2
 800309e:	19db      	adds	r3, r3, r7
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e055      	b.n	8003152 <UART_SetConfig+0x22a>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a77      	ldr	r2, [pc, #476]	; (8003288 <UART_SetConfig+0x360>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d106      	bne.n	80030be <UART_SetConfig+0x196>
 80030b0:	231b      	movs	r3, #27
 80030b2:	2218      	movs	r2, #24
 80030b4:	189b      	adds	r3, r3, r2
 80030b6:	19db      	adds	r3, r3, r7
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e049      	b.n	8003152 <UART_SetConfig+0x22a>
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6b      	ldr	r2, [pc, #428]	; (8003270 <UART_SetConfig+0x348>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d13e      	bne.n	8003146 <UART_SetConfig+0x21e>
 80030c8:	4b6c      	ldr	r3, [pc, #432]	; (800327c <UART_SetConfig+0x354>)
 80030ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030cc:	23c0      	movs	r3, #192	; 0xc0
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	4013      	ands	r3, r2
 80030d2:	22c0      	movs	r2, #192	; 0xc0
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d027      	beq.n	800312a <UART_SetConfig+0x202>
 80030da:	22c0      	movs	r2, #192	; 0xc0
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	4293      	cmp	r3, r2
 80030e0:	d82a      	bhi.n	8003138 <UART_SetConfig+0x210>
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d011      	beq.n	800310e <UART_SetConfig+0x1e6>
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d822      	bhi.n	8003138 <UART_SetConfig+0x210>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <UART_SetConfig+0x1d8>
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	00d2      	lsls	r2, r2, #3
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00e      	beq.n	800311c <UART_SetConfig+0x1f4>
 80030fe:	e01b      	b.n	8003138 <UART_SetConfig+0x210>
 8003100:	231b      	movs	r3, #27
 8003102:	2218      	movs	r2, #24
 8003104:	189b      	adds	r3, r3, r2
 8003106:	19db      	adds	r3, r3, r7
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e021      	b.n	8003152 <UART_SetConfig+0x22a>
 800310e:	231b      	movs	r3, #27
 8003110:	2218      	movs	r2, #24
 8003112:	189b      	adds	r3, r3, r2
 8003114:	19db      	adds	r3, r3, r7
 8003116:	2202      	movs	r2, #2
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e01a      	b.n	8003152 <UART_SetConfig+0x22a>
 800311c:	231b      	movs	r3, #27
 800311e:	2218      	movs	r2, #24
 8003120:	189b      	adds	r3, r3, r2
 8003122:	19db      	adds	r3, r3, r7
 8003124:	2204      	movs	r2, #4
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e013      	b.n	8003152 <UART_SetConfig+0x22a>
 800312a:	231b      	movs	r3, #27
 800312c:	2218      	movs	r2, #24
 800312e:	189b      	adds	r3, r3, r2
 8003130:	19db      	adds	r3, r3, r7
 8003132:	2208      	movs	r2, #8
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e00c      	b.n	8003152 <UART_SetConfig+0x22a>
 8003138:	231b      	movs	r3, #27
 800313a:	2218      	movs	r2, #24
 800313c:	189b      	adds	r3, r3, r2
 800313e:	19db      	adds	r3, r3, r7
 8003140:	2210      	movs	r2, #16
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e005      	b.n	8003152 <UART_SetConfig+0x22a>
 8003146:	231b      	movs	r3, #27
 8003148:	2218      	movs	r2, #24
 800314a:	189b      	adds	r3, r3, r2
 800314c:	19db      	adds	r3, r3, r7
 800314e:	2210      	movs	r2, #16
 8003150:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a46      	ldr	r2, [pc, #280]	; (8003270 <UART_SetConfig+0x348>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d000      	beq.n	800315e <UART_SetConfig+0x236>
 800315c:	e09a      	b.n	8003294 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800315e:	231b      	movs	r3, #27
 8003160:	2218      	movs	r2, #24
 8003162:	189b      	adds	r3, r3, r2
 8003164:	19db      	adds	r3, r3, r7
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b08      	cmp	r3, #8
 800316a:	d01d      	beq.n	80031a8 <UART_SetConfig+0x280>
 800316c:	dc20      	bgt.n	80031b0 <UART_SetConfig+0x288>
 800316e:	2b04      	cmp	r3, #4
 8003170:	d015      	beq.n	800319e <UART_SetConfig+0x276>
 8003172:	dc1d      	bgt.n	80031b0 <UART_SetConfig+0x288>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <UART_SetConfig+0x256>
 8003178:	2b02      	cmp	r3, #2
 800317a:	d005      	beq.n	8003188 <UART_SetConfig+0x260>
 800317c:	e018      	b.n	80031b0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800317e:	f7ff faa7 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8003182:	0003      	movs	r3, r0
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003186:	e01c      	b.n	80031c2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003188:	4b3c      	ldr	r3, [pc, #240]	; (800327c <UART_SetConfig+0x354>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2210      	movs	r2, #16
 800318e:	4013      	ands	r3, r2
 8003190:	d002      	beq.n	8003198 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003192:	4b3e      	ldr	r3, [pc, #248]	; (800328c <UART_SetConfig+0x364>)
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003196:	e014      	b.n	80031c2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003198:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <UART_SetConfig+0x368>)
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800319c:	e011      	b.n	80031c2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319e:	f7ff f9e7 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 80031a2:	0003      	movs	r3, r0
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031a6:	e00c      	b.n	80031c2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031ae:	e008      	b.n	80031c2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80031b4:	231a      	movs	r3, #26
 80031b6:	2218      	movs	r2, #24
 80031b8:	189b      	adds	r3, r3, r2
 80031ba:	19db      	adds	r3, r3, r7
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
        break;
 80031c0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d100      	bne.n	80031ca <UART_SetConfig+0x2a2>
 80031c8:	e134      	b.n	8003434 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	0013      	movs	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d305      	bcc.n	80031e6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d906      	bls.n	80031f4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80031e6:	231a      	movs	r3, #26
 80031e8:	2218      	movs	r2, #24
 80031ea:	189b      	adds	r3, r3, r2
 80031ec:	19db      	adds	r3, r3, r7
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e11f      	b.n	8003434 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	6939      	ldr	r1, [r7, #16]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	000b      	movs	r3, r1
 8003202:	0e1b      	lsrs	r3, r3, #24
 8003204:	0010      	movs	r0, r2
 8003206:	0205      	lsls	r5, r0, #8
 8003208:	431d      	orrs	r5, r3
 800320a:	000b      	movs	r3, r1
 800320c:	021c      	lsls	r4, r3, #8
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	68b8      	ldr	r0, [r7, #8]
 800321c:	68f9      	ldr	r1, [r7, #12]
 800321e:	1900      	adds	r0, r0, r4
 8003220:	4169      	adcs	r1, r5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	2300      	movs	r3, #0
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f7fc fff6 	bl	8000220 <__aeabi_uldivmod>
 8003234:	0002      	movs	r2, r0
 8003236:	000b      	movs	r3, r1
 8003238:	0013      	movs	r3, r2
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800323c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800323e:	23c0      	movs	r3, #192	; 0xc0
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	429a      	cmp	r2, r3
 8003244:	d309      	bcc.n	800325a <UART_SetConfig+0x332>
 8003246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	035b      	lsls	r3, r3, #13
 800324c:	429a      	cmp	r2, r3
 800324e:	d204      	bcs.n	800325a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003256:	60da      	str	r2, [r3, #12]
 8003258:	e0ec      	b.n	8003434 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800325a:	231a      	movs	r3, #26
 800325c:	2218      	movs	r2, #24
 800325e:	189b      	adds	r3, r3, r2
 8003260:	19db      	adds	r3, r3, r7
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e0e5      	b.n	8003434 <UART_SetConfig+0x50c>
 8003268:	efff69f3 	.word	0xefff69f3
 800326c:	ffffcfff 	.word	0xffffcfff
 8003270:	40004800 	.word	0x40004800
 8003274:	fffff4ff 	.word	0xfffff4ff
 8003278:	40013800 	.word	0x40013800
 800327c:	40021000 	.word	0x40021000
 8003280:	40004400 	.word	0x40004400
 8003284:	40004c00 	.word	0x40004c00
 8003288:	40005000 	.word	0x40005000
 800328c:	003d0900 	.word	0x003d0900
 8003290:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	429a      	cmp	r2, r3
 800329e:	d000      	beq.n	80032a2 <UART_SetConfig+0x37a>
 80032a0:	e071      	b.n	8003386 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80032a2:	231b      	movs	r3, #27
 80032a4:	2218      	movs	r2, #24
 80032a6:	189b      	adds	r3, r3, r2
 80032a8:	19db      	adds	r3, r3, r7
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d822      	bhi.n	80032f6 <UART_SetConfig+0x3ce>
 80032b0:	009a      	lsls	r2, r3, #2
 80032b2:	4b68      	ldr	r3, [pc, #416]	; (8003454 <UART_SetConfig+0x52c>)
 80032b4:	18d3      	adds	r3, r2, r3
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ba:	f7ff fa09 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 80032be:	0003      	movs	r3, r0
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032c2:	e021      	b.n	8003308 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c4:	f7ff fa1a 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 80032c8:	0003      	movs	r3, r0
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032cc:	e01c      	b.n	8003308 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032ce:	4b62      	ldr	r3, [pc, #392]	; (8003458 <UART_SetConfig+0x530>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2210      	movs	r2, #16
 80032d4:	4013      	ands	r3, r2
 80032d6:	d002      	beq.n	80032de <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032d8:	4b60      	ldr	r3, [pc, #384]	; (800345c <UART_SetConfig+0x534>)
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032dc:	e014      	b.n	8003308 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80032de:	4b60      	ldr	r3, [pc, #384]	; (8003460 <UART_SetConfig+0x538>)
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032e2:	e011      	b.n	8003308 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e4:	f7ff f944 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 80032e8:	0003      	movs	r3, r0
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032ec:	e00c      	b.n	8003308 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032f4:	e008      	b.n	8003308 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80032fa:	231a      	movs	r3, #26
 80032fc:	2218      	movs	r2, #24
 80032fe:	189b      	adds	r3, r3, r2
 8003300:	19db      	adds	r3, r3, r7
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
        break;
 8003306:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d100      	bne.n	8003310 <UART_SetConfig+0x3e8>
 800330e:	e091      	b.n	8003434 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	005a      	lsls	r2, r3, #1
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	18d2      	adds	r2, r2, r3
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0019      	movs	r1, r3
 8003322:	0010      	movs	r0, r2
 8003324:	f7fc fef0 	bl	8000108 <__udivsi3>
 8003328:	0003      	movs	r3, r0
 800332a:	b29b      	uxth	r3, r3
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	2b0f      	cmp	r3, #15
 8003332:	d921      	bls.n	8003378 <UART_SetConfig+0x450>
 8003334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	025b      	lsls	r3, r3, #9
 800333a:	429a      	cmp	r2, r3
 800333c:	d21c      	bcs.n	8003378 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	b29a      	uxth	r2, r3
 8003342:	200e      	movs	r0, #14
 8003344:	2418      	movs	r4, #24
 8003346:	1903      	adds	r3, r0, r4
 8003348:	19db      	adds	r3, r3, r7
 800334a:	210f      	movs	r1, #15
 800334c:	438a      	bics	r2, r1
 800334e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	b29b      	uxth	r3, r3
 8003356:	2207      	movs	r2, #7
 8003358:	4013      	ands	r3, r2
 800335a:	b299      	uxth	r1, r3
 800335c:	1903      	adds	r3, r0, r4
 800335e:	19db      	adds	r3, r3, r7
 8003360:	1902      	adds	r2, r0, r4
 8003362:	19d2      	adds	r2, r2, r7
 8003364:	8812      	ldrh	r2, [r2, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	1902      	adds	r2, r0, r4
 8003370:	19d2      	adds	r2, r2, r7
 8003372:	8812      	ldrh	r2, [r2, #0]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	e05d      	b.n	8003434 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003378:	231a      	movs	r3, #26
 800337a:	2218      	movs	r2, #24
 800337c:	189b      	adds	r3, r3, r2
 800337e:	19db      	adds	r3, r3, r7
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e056      	b.n	8003434 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003386:	231b      	movs	r3, #27
 8003388:	2218      	movs	r2, #24
 800338a:	189b      	adds	r3, r3, r2
 800338c:	19db      	adds	r3, r3, r7
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d822      	bhi.n	80033da <UART_SetConfig+0x4b2>
 8003394:	009a      	lsls	r2, r3, #2
 8003396:	4b33      	ldr	r3, [pc, #204]	; (8003464 <UART_SetConfig+0x53c>)
 8003398:	18d3      	adds	r3, r2, r3
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800339e:	f7ff f997 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 80033a2:	0003      	movs	r3, r0
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033a6:	e021      	b.n	80033ec <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a8:	f7ff f9a8 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 80033ac:	0003      	movs	r3, r0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033b0:	e01c      	b.n	80033ec <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033b2:	4b29      	ldr	r3, [pc, #164]	; (8003458 <UART_SetConfig+0x530>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2210      	movs	r2, #16
 80033b8:	4013      	ands	r3, r2
 80033ba:	d002      	beq.n	80033c2 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <UART_SetConfig+0x534>)
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80033c0:	e014      	b.n	80033ec <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 80033c2:	4b27      	ldr	r3, [pc, #156]	; (8003460 <UART_SetConfig+0x538>)
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033c6:	e011      	b.n	80033ec <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c8:	f7ff f8d2 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 80033cc:	0003      	movs	r3, r0
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033d0:	e00c      	b.n	80033ec <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033d8:	e008      	b.n	80033ec <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80033de:	231a      	movs	r3, #26
 80033e0:	2218      	movs	r2, #24
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	19db      	adds	r3, r3, r7
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
        break;
 80033ea:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	085a      	lsrs	r2, r3, #1
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	18d2      	adds	r2, r2, r3
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	0019      	movs	r1, r3
 8003402:	0010      	movs	r0, r2
 8003404:	f7fc fe80 	bl	8000108 <__udivsi3>
 8003408:	0003      	movs	r3, r0
 800340a:	b29b      	uxth	r3, r3
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	2b0f      	cmp	r3, #15
 8003412:	d909      	bls.n	8003428 <UART_SetConfig+0x500>
 8003414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	025b      	lsls	r3, r3, #9
 800341a:	429a      	cmp	r2, r3
 800341c:	d204      	bcs.n	8003428 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	e005      	b.n	8003434 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003428:	231a      	movs	r3, #26
 800342a:	2218      	movs	r2, #24
 800342c:	189b      	adds	r3, r3, r2
 800342e:	19db      	adds	r3, r3, r7
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2200      	movs	r2, #0
 8003438:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2200      	movs	r2, #0
 800343e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003440:	231a      	movs	r3, #26
 8003442:	2218      	movs	r2, #24
 8003444:	189b      	adds	r3, r3, r2
 8003446:	19db      	adds	r3, r3, r7
 8003448:	781b      	ldrb	r3, [r3, #0]
}
 800344a:	0018      	movs	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	b00e      	add	sp, #56	; 0x38
 8003450:	bdb0      	pop	{r4, r5, r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	08003884 	.word	0x08003884
 8003458:	40021000 	.word	0x40021000
 800345c:	003d0900 	.word	0x003d0900
 8003460:	00f42400 	.word	0x00f42400
 8003464:	080038a8 	.word	0x080038a8

08003468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	2201      	movs	r2, #1
 8003476:	4013      	ands	r3, r2
 8003478:	d00b      	beq.n	8003492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <UART_AdvFeatureConfig+0x144>)
 8003482:	4013      	ands	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2202      	movs	r2, #2
 8003498:	4013      	ands	r3, r2
 800349a:	d00b      	beq.n	80034b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4a43      	ldr	r2, [pc, #268]	; (80035b0 <UART_AdvFeatureConfig+0x148>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	0019      	movs	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	2204      	movs	r2, #4
 80034ba:	4013      	ands	r3, r2
 80034bc:	d00b      	beq.n	80034d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a3b      	ldr	r2, [pc, #236]	; (80035b4 <UART_AdvFeatureConfig+0x14c>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2208      	movs	r2, #8
 80034dc:	4013      	ands	r3, r2
 80034de:	d00b      	beq.n	80034f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4a34      	ldr	r2, [pc, #208]	; (80035b8 <UART_AdvFeatureConfig+0x150>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	0019      	movs	r1, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	2210      	movs	r2, #16
 80034fe:	4013      	ands	r3, r2
 8003500:	d00b      	beq.n	800351a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a2c      	ldr	r2, [pc, #176]	; (80035bc <UART_AdvFeatureConfig+0x154>)
 800350a:	4013      	ands	r3, r2
 800350c:	0019      	movs	r1, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	2220      	movs	r2, #32
 8003520:	4013      	ands	r3, r2
 8003522:	d00b      	beq.n	800353c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <UART_AdvFeatureConfig+0x158>)
 800352c:	4013      	ands	r3, r2
 800352e:	0019      	movs	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	2240      	movs	r2, #64	; 0x40
 8003542:	4013      	ands	r3, r2
 8003544:	d01d      	beq.n	8003582 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <UART_AdvFeatureConfig+0x15c>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	035b      	lsls	r3, r3, #13
 8003566:	429a      	cmp	r2, r3
 8003568:	d10b      	bne.n	8003582 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <UART_AdvFeatureConfig+0x160>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	4013      	ands	r3, r2
 800358a:	d00b      	beq.n	80035a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4a0e      	ldr	r2, [pc, #56]	; (80035cc <UART_AdvFeatureConfig+0x164>)
 8003594:	4013      	ands	r3, r2
 8003596:	0019      	movs	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	fffdffff 	.word	0xfffdffff
 80035b0:	fffeffff 	.word	0xfffeffff
 80035b4:	fffbffff 	.word	0xfffbffff
 80035b8:	ffff7fff 	.word	0xffff7fff
 80035bc:	ffffefff 	.word	0xffffefff
 80035c0:	ffffdfff 	.word	0xffffdfff
 80035c4:	ffefffff 	.word	0xffefffff
 80035c8:	ff9fffff 	.word	0xff9fffff
 80035cc:	fff7ffff 	.word	0xfff7ffff

080035d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	2100      	movs	r1, #0
 80035de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035e0:	f7fd fcd0 	bl	8000f84 <HAL_GetTick>
 80035e4:	0003      	movs	r3, r0
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2208      	movs	r2, #8
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d10c      	bne.n	8003610 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	0391      	lsls	r1, r2, #14
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4a17      	ldr	r2, [pc, #92]	; (800365c <UART_CheckIdleState+0x8c>)
 8003600:	9200      	str	r2, [sp, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	f000 f82c 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8003608:	1e03      	subs	r3, r0, #0
 800360a:	d001      	beq.n	8003610 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e021      	b.n	8003654 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2204      	movs	r2, #4
 8003618:	4013      	ands	r3, r2
 800361a:	2b04      	cmp	r3, #4
 800361c:	d10c      	bne.n	8003638 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2280      	movs	r2, #128	; 0x80
 8003622:	03d1      	lsls	r1, r2, #15
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4a0d      	ldr	r2, [pc, #52]	; (800365c <UART_CheckIdleState+0x8c>)
 8003628:	9200      	str	r2, [sp, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	f000 f818 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e00d      	b.n	8003654 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2274      	movs	r2, #116	; 0x74
 800364e:	2100      	movs	r1, #0
 8003650:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	b004      	add	sp, #16
 800365a:	bd80      	pop	{r7, pc}
 800365c:	01ffffff 	.word	0x01ffffff

08003660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b094      	sub	sp, #80	; 0x50
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	1dfb      	adds	r3, r7, #7
 800366e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003670:	e0a3      	b.n	80037ba <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003674:	3301      	adds	r3, #1
 8003676:	d100      	bne.n	800367a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003678:	e09f      	b.n	80037ba <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fd fc83 	bl	8000f84 <HAL_GetTick>
 800367e:	0002      	movs	r2, r0
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <UART_WaitOnFlagUntilTimeout+0x30>
 800368a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800368c:	2b00      	cmp	r3, #0
 800368e:	d13d      	bne.n	800370c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003690:	f3ef 8310 	mrs	r3, PRIMASK
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003698:	647b      	str	r3, [r7, #68]	; 0x44
 800369a:	2301      	movs	r3, #1
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	494c      	ldr	r1, [pc, #304]	; (80037e4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c2:	f3ef 8310 	mrs	r3, PRIMASK
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	643b      	str	r3, [r7, #64]	; 0x40
 80036cc:	2301      	movs	r3, #1
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2101      	movs	r1, #1
 80036e4:	438a      	bics	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2274      	movs	r2, #116	; 0x74
 8003704:	2100      	movs	r1, #0
 8003706:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e067      	b.n	80037dc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2204      	movs	r2, #4
 8003714:	4013      	ands	r3, r2
 8003716:	d050      	beq.n	80037ba <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69da      	ldr	r2, [r3, #28]
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	401a      	ands	r2, r3
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	429a      	cmp	r2, r3
 800372a:	d146      	bne.n	80037ba <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2280      	movs	r2, #128	; 0x80
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003736:	f3ef 8310 	mrs	r3, PRIMASK
 800373a:	613b      	str	r3, [r7, #16]
  return(result);
 800373c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003740:	2301      	movs	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4923      	ldr	r1, [pc, #140]	; (80037e4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003758:	400a      	ands	r2, r1
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f383 8810 	msr	PRIMASK, r3
}
 8003766:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003768:	f3ef 8310 	mrs	r3, PRIMASK
 800376c:	61fb      	str	r3, [r7, #28]
  return(result);
 800376e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003770:	64bb      	str	r3, [r7, #72]	; 0x48
 8003772:	2301      	movs	r3, #1
 8003774:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f383 8810 	msr	PRIMASK, r3
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	438a      	bics	r2, r1
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2280      	movs	r2, #128	; 0x80
 80037aa:	2120      	movs	r1, #32
 80037ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2274      	movs	r2, #116	; 0x74
 80037b2:	2100      	movs	r1, #0
 80037b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e010      	b.n	80037dc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	4013      	ands	r3, r2
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	425a      	negs	r2, r3
 80037ca:	4153      	adcs	r3, r2
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	001a      	movs	r2, r3
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d100      	bne.n	80037da <UART_WaitOnFlagUntilTimeout+0x17a>
 80037d8:	e74b      	b.n	8003672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b014      	add	sp, #80	; 0x50
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	fffffe5f 	.word	0xfffffe5f

080037e8 <__libc_init_array>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	2600      	movs	r6, #0
 80037ec:	4d0c      	ldr	r5, [pc, #48]	; (8003820 <__libc_init_array+0x38>)
 80037ee:	4c0d      	ldr	r4, [pc, #52]	; (8003824 <__libc_init_array+0x3c>)
 80037f0:	1b64      	subs	r4, r4, r5
 80037f2:	10a4      	asrs	r4, r4, #2
 80037f4:	42a6      	cmp	r6, r4
 80037f6:	d109      	bne.n	800380c <__libc_init_array+0x24>
 80037f8:	2600      	movs	r6, #0
 80037fa:	f000 f821 	bl	8003840 <_init>
 80037fe:	4d0a      	ldr	r5, [pc, #40]	; (8003828 <__libc_init_array+0x40>)
 8003800:	4c0a      	ldr	r4, [pc, #40]	; (800382c <__libc_init_array+0x44>)
 8003802:	1b64      	subs	r4, r4, r5
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	42a6      	cmp	r6, r4
 8003808:	d105      	bne.n	8003816 <__libc_init_array+0x2e>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	00b3      	lsls	r3, r6, #2
 800380e:	58eb      	ldr	r3, [r5, r3]
 8003810:	4798      	blx	r3
 8003812:	3601      	adds	r6, #1
 8003814:	e7ee      	b.n	80037f4 <__libc_init_array+0xc>
 8003816:	00b3      	lsls	r3, r6, #2
 8003818:	58eb      	ldr	r3, [r5, r3]
 800381a:	4798      	blx	r3
 800381c:	3601      	adds	r6, #1
 800381e:	e7f2      	b.n	8003806 <__libc_init_array+0x1e>
 8003820:	080038d4 	.word	0x080038d4
 8003824:	080038d4 	.word	0x080038d4
 8003828:	080038d4 	.word	0x080038d4
 800382c:	080038d8 	.word	0x080038d8

08003830 <memset>:
 8003830:	0003      	movs	r3, r0
 8003832:	1882      	adds	r2, r0, r2
 8003834:	4293      	cmp	r3, r2
 8003836:	d100      	bne.n	800383a <memset+0xa>
 8003838:	4770      	bx	lr
 800383a:	7019      	strb	r1, [r3, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	e7f9      	b.n	8003834 <memset+0x4>

08003840 <_init>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003846:	bc08      	pop	{r3}
 8003848:	469e      	mov	lr, r3
 800384a:	4770      	bx	lr

0800384c <_fini>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr
